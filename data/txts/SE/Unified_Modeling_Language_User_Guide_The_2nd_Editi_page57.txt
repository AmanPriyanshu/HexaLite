· Model the thing you are abstracting as a class. · If you want to distinguish these things from the UML's defined building blocks, create a new building block by using stereotypes to specify these new semantics and to give a distinctive visual cue. · If the thing you are modeling is some kind of hardware that itself contains software, consider modeling it as a kind of node, as well, so that you can further expand on its structure. Nodes are discussed in Chapter 26. Note The UML is mainly intended for modeling software-intensive systems, although, in conjunction with textual hardware modeling languages, such as VHDL, the UML can be quite expressive for modeling hardware systems.  Things that are external to your system are often modeled as actors, as discussed in Chapter 16. As Figure 4-11 shows, it's perfectly normal to abstract humans (like AccountsReceivableAgent) and hardware (like Robot) as classes, because each represents a set of objects with a common structure and a common behavior. Figure 4-11 Modeling Nonsoftware Things  Modeling Primitive Types Types are discussed in Chapter 11. At the other extreme, the things you model may be drawn directly from the programming language you are using to implement a solution. Typically, these abstractions involve primitive types, such as integers, characters, strings, and even enumeration types, that you might create yourself. To model primitive types, · Model the thing you are abstracting as a type or an enumeration, which is rendered using class notation with the appropriate stereotype. · If you need to specify the range of values associated with this type, use constraints. Constraints are described in Chapter 6. 