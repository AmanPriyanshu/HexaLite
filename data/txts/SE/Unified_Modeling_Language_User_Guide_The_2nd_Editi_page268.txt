· Represents an independent flow of control that maximizes the potential for true concurrency in the system. · Is not so fine-grained that it requires a multitude of other active elements that might result in an over-engineered and fragile process architecture. · Carefully manages communication among peer active elements, choosing between asynchronous and synchronous messaging. · Carefully treats each object as a critical region, using suitable synchronization properties to preserve its semantics in the presence of multiple flows of control. · Explicitly distinguishes between process and thread semantics. When you draw an active class or an active object in the UML, · Show only those attributes, operations, and signals that are important in understanding the abstraction in its context. · Explicitly show all operation synchronization properties. Chapter 23. Time and Space In this chapter · Time, duration, and location · Modeling timing constraints · Modeling the distribution of objects · Modeling objects that migrate · Dealing with real time and distributed systems The real world is a harsh and unforgiving place. Events may happen at unpredictable times, yet demand a specific response at a specific time. A system's resources may have to be distributed around the world#some of those resources might even move about#raising issues of latency, synchronization, security, and quality of service. Modeling time and space is an essential element of any real time and/or distributed system. You use a number of the UML's features, including timing marks, time expressions, constraints, and tagged values, to visualize, specify, construct, and document these systems. Dealing with real time and distributed systems is hard. Good models reveal the necessary and sufficient properties of a system's time and space characteristics. Getting Started When you start to model most software systems, you can usually assume a frictionless environment#messages are sent in zero time, networks never go down, workstations never fail, the load across your network is always evenly balanced. Unfortunately, the real world does not work that way#messages do take time to deliver (and, sometimes, never get delivered), networks do go down, workstations do fail, and a network's load is often unbalanced. Therefore, when you encounter systems that must operate in the real world, you have to take into account the issues of time and space. 