˜˜
˚˛˝˙ˆˇ˘˜˜˜˜˜˜2. In the Running state, the system expects further messages. If a shutdown() mes-sage is received, the object returns to the shutdown state.3.
 If a reportWeather()
 message is received, the system moves to the Summarizing state. When the summary is complete, the system moves to a 
Transmitting state where 
the information is transmitted to the remote system. It then returns to the 
Running state.
4. If a signal from the clock is received, the system moves to the Collecting state, where it collects data from the instruments. Each instrument is instructed in turn to collect its data from the associated sensors.5. If a remoteControl() message is received, the system moves to a controlled state in which it responds to a different set of messages from the remote control room. 
These are not shown on this diagram.State diagrams are useful high-level models of a system or an object™s operation. However, you don™t need a state diagram for all of the objects in the system. Many 
system objects in a system are simple, and their operation can be easily described 
without a state model.ˇˇAn important part of any design process is the specification of the interfaces between 
the components in the design. You need to specify interfaces so that objects and 

subsystems can be designed in parallel. Once an interface has been specified, the 

developers of other objects may assume that interface will be implemented.Interface design is concerned with specifying the detail of the interface to an 
object or to a group of objects. This means defining the signatures and semantics of 
the services that are provided by the object or by a group of objects. Interfaces can be 

specified in the UML using the same notation as a class diagram. However, there is 

no attribute section, and the UML stereotype «interface» should be included in the 
name part. The semantics of the interface may be defined using the object constraint 
language (OCL). I discuss the use of the OCL in Chapter 16, where I explain how it 
can be used to describe the semantics of components.You should not include details of the data representation in an interface design, as 
attributes are not defined in an interface specification. However, you should include 

operations to access and update data. As the data representation is hidden, it can be 

easily changed without affecting the objects that use that data. This leads to a design 

that is inherently more maintainable. For example, an array representation of a stack 

may be changed to a list representation without affecting other objects that use the 

stack. By contrast, you should normally expose the attributes in an object model, as 

this is the clearest way of describing the essential characteristics of the objects.There is not a simple 1:1 relationship between objects and interfaces. The same object may have several interfaces, each of which is a viewpoint on the methods that 
it provides. This is supported directly in Java, where interfaces are declared separately 

from objects and objects ﬁimplementﬂ interfaces. Equally, a group of objects may all 
be accessed through a single interface.