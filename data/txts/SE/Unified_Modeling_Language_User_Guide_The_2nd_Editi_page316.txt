Mechanisms are collaborations that stand alone; their context is not a single use case or an operation but, rather, the system as a whole. Any element visible in that part of the system is a candidate for participation in a mechanism. Mechanisms such as these represent architecturally significant design decisions and should not be treated lightly. Typically, your system's architect will devise its mechanisms, and you'll evolve these mechanisms with each new release. At the end, you'll find your system simple (because these mechanisms reify common interactions), understandable (because you can approach the system from its mechanisms), and resilient (by tuning each mechanism, you tune the system as a whole). To model a mechanism, · Identify the major mechanisms that shape your system's architecture. These mechanisms are driven by the overall architectural style you choose to impose on your implementation, along with the style appropriate to your problem domain. · Represent each of these mechanisms as a collaboration. · Expand on the structural and behavioral part of each collaboration. Look for sharing, where possible. · Validate these mechanisms early in the development lifecycle (they are of strategic importance), but evolve them with each new release, as you learn more about the details of your implementation. Hints and Tips When you model collaborations in the UML, remember that every collaboration should represent either the realization of a use case or operation or should stand alone as a mechanism of the system. A well-structured collaboration · Consists of both structural and behavioral aspects. · Provides a crisp abstraction of some identifiable interaction in the system. · Is rarely completely independent, but will overlap with the structural elements of other collaborations. · Is understandable and simple. When you draw a collaboration in the UML, · Explicitly render a collaboration only when it's necessary to understand its relationship to other collaborations, classifiers, operations, or the system as a whole. Otherwise, use collaborations, but keep them in the backplane. · Organize collaborations according to the classifier or operation they represent, or in packages associated with the system as a whole. Chapter 28. Patterns and Frameworks In this chapter · Patterns and frameworks 