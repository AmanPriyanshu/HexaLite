You apply use case diagrams to model the static use case view of a system. This view primarily supports the behavior of a system#the outwardly visible services that the system provides in the context of its environment. When you model the static use case view of a system, you'll typically apply use case diagrams in one of two ways. 1. To model the context of a system Modeling the context of a system involves drawing a line around the whole system and asserting which actors lie outside the system and interact with it.Here, you'll apply use case diagrams to specify the actors and the meaning of their roles. Requirements are discussed in Chapters 4 and 6. 2. To model the requirements of a system Modeling the requirements of a system involves specifying what that system should do (from a point of view of outside the system), independent of how that system should do it. Here, you'll apply use case diagrams to specify the desired behavior of the system. In this manner, a use case diagram lets you view the whole system as a black box; you can see what's outside the system and you can see how that system reacts to the things outside, but you can't see how that system works on the inside. Common Modeling Techniques Modeling the Context of a System Given a system#any system#some things will live inside the system, some things will live outside it. For example, in a credit card validation system, you'll find such things as accounts, transactions, and fraud detection agents inside the system. Similarly, you'll find such things as credit card customers and retail institutions outside the system. The things that live inside the system are responsible for carrying out the behavior that those on the outside expect the system to provide. All those things on the outside that interact with the system constitute the system's context. This context defines the environment in which that system lives. Systems are discussed in Chapter 31. In the UML, you can model the context of a system with a use case diagram, emphasizing the actors that surround the system. Deciding what to include as an actor is important because in doing so you specify a class of things that interact with the system. Deciding what not to include as an actor is equally, if not more, important because that constrains the system's environment to include only those actors that are necessary in the life of the system. To model the context of a system, · Identify the actors that surround the system by considering which groups require help from the system to perform their tasks; which groups are needed to execute the system's functions; which groups interact with external hardware or other software systems; and which groups perform secondary functions for administration and maintenance. · Organize actors that are similar to one another in a generalization/specialization hierarchy. · Where it aids understandability, provide a stereotype for each such actor. 