 Two of these children (BankAccount and RealEstate) inherit from multiple parents. RealEstate, for example, is a kind of Asset, as well as a kind of InsurableItem, and BankAccount is a kind of Asset, as well as a kind of InterestBearingItem and an InsurableItem. Parents, such as InterestBearingItem and InsurableItem, are called mixins because they don't stand alone but, rather, are intended to be mixed in with other parents (such as Asset) to form children from these various bits of structure and behavior. Note Use multiple inheritance carefully. You'll run into problems if a child has multiple parents whose structure or behavior overlap. In fact, in most cases, multiple inheritance can be replaced by delegation, in which a child inherits from only one parent and then uses aggregation to obtain the structure and behavior of more subordinate parents. The main downside with this approach is that you lose the semantics of substitutability with these subordinate parents.  The UML's extensibility mechanisms are discussed in Chapter 6; the UML's defined stereotypes and constraints are discussed in Appendix B. A plain, unadorned generalization relationship is sufficient for most of the inheritance relationships you'll encounter. However, if you want to specify a shade of meaning, the UML defines one stereotype and four constraints that may be applied to generalization relationships. First, there is the one stereotype. ?implementation Specifies that the child inherits the implementation of the parent but does not make public nor support its interfaces, thereby violating substitutability You'll use implementation when you want to model private inheritance, such as found in C++. Next, there are four standard constraints that apply to generalization relationships. 1. complete  Specifies that all children in the generalization have been specified in the model (although some may be elided in the diagram) and that no additional children are permitted 