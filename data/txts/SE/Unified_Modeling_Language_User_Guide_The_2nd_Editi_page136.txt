Services that run through the walls for electrical, heating, plumbing, and waste disposal facilities can be changed with some degree of scrap and rework, but you still don't have to rend the fabric of the building to do so. Not only do standard building practices help you build buildings that can evolve over time, but there are many standard interfaces to which you can build, permitting you to use common, off-the-shelf components, whose use ultimately helps reduce the cost of construction and maintenance. For example, there are standard sizes for lumber, making it easy to build walls that are multiples of a common size. There are standard sizes doors and windows, which means that you don't have to hand-craft every opening in your building. There are even standards for electrical outlets and telephone plugs (although these vary from country to country) that make it easier for you to mix and match electronic equipment. Frameworks are discussed in Chapter 28. In software, it's important to build systems with a clear separation of concerns so that, as the system evolves, changes in one part of the system don't ripple through, rending other parts of the system. One important way of achieving this degree of separation is by specifying clear seams in your system, which draw a line between those parts that may change independently. Furthermore, by choosing the right interfaces, you can pick standard components, libraries, and frameworks to implement those interfaces, without having to build them yourself. As you discover better implementations, you can replace the old ones without disturbing their users. Classes are discussed in Chapters 4 and 9; components are discussed in Chapter 25. In the UML, you use interfaces to model the seams in a system. An interface is a collection of operations used to specify a service of a class or a component. By declaring an interface, you can state the desired behavior of an abstraction independent of an implementation of that abstraction. Clients can build against that interface, and you can build or buy any implementation of that interface, as long as the implementation satisfies the responsibilities and the contract denoted by the interface. Packages are discussed in Chapter 12; subsystems are discussed in Chapter 31. Many programming languages support the concept of interfaces, including Java and CORBA IDL. Interfaces are not only important for dividing the specification and the implementation of a class or component, but as you scale up to larger systems, you can use interfaces to specify the outside view of a package or subsystem. Components are discussed in Chapter 25. The UML provides a graphical representation for interfaces, as Figure 11-1 shows. This notation permits you to visualize the specification of an abstraction apart from any implementation. Figure 11-1 Interfaces 