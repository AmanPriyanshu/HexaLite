˜˜˚˜˜˚˛˝˙ˆˇ˘
˜distributed component systems, 501, 506Œ09, 517distributed systems, 175Œ84, 192, 501Œ12, 517
embedded software and, 620Œ26, 634
environmental control, 620, 623Œ25
layered architecture, 177Œ79
master-slave architecture, 501Œ02
model-view-controller (MVC), 176Œ77
multi-tier client-server architecture, 501, 505Œ06
observe and react, 620, 621Œ23
peer-to-peer (p2p) architecture, 501, 509Œ12, 517
pipe and filter architecture, 182Œ84
process pipeline, 620, 625Œ26
real-time software, 620Œ26, 634
repository architecture, 179Œ80
security and, 172, 388, 392Œ95
systems of systems (SoS), 602Œ606, 607
trading systems, 605Œ06
two-tier client-server architecture, 501, 503Œ05Architecture Development Method (ADM), 601
architectures (software architectures)application, 184Œ91, 192
architecture in the large, 169
architecture in the small, 169
defined, 192
distributed, 171, 182
fault-tolerant, 318Œ25
industrial practice v., 170
pipe and filter compiler, 190Œ91
reference, 191
self-monitoring, 320Œ22Ariane 5 explosion, 296, 479, 480
arithmetic error, 351
as low as reasonably practical (ALARP) risks, 347
aspect-oriented software development, 442
Assertion checking, 360
assessmenthazards for safety requirements, 345, 346Œ349
security risk, 381Œ82assets, 377, 378, 413, 414Œ415
assurancesafety processes, 353Œ56
security testing and, 402Œ04ATMs (automated teller machines), 186Œ87, 315Œ16
attacks, 377, 378Œ79, 389, 413, 414Œ15, 494Œ95
attributes of software, 20, 22, 40
authentication, 413, 414, 416
automated management, 423Œ24
automated testing, 78, 81Œ83, 233Œ34, 242, 252
automatic static analysis, 359Œ60Airbus 340 flight control system, 321Œ22, 340
AJAX programming, 28, 445, 512
algorithm error, 351Œ52
algorithmic cost modeling, 683, 684Œ86
alpha testing, 249
analysis systems, 25
Android, 219
Apache web server, 219
aperiodic stimuli, 613
Apollo 13 mission resilience, 409, 411, 416
application assessment (legacy systems), 269
application data, 262
application frameworks, 442, 443Œ46, 460
application layer, 292
application-level protection, 393Œ394
application programming interfaces (APIs), 39, 595Œ96application security, 374Œ375
application software, 262
application system, 53, 438, 453Œ60COTS systems, 453
ERP systems, 454Œ457
reuse, 438, 442, 453Œ60architectural description languages (ADLs), 175architectural design, 57, 149, 167Œ195, 570Œ71, 595, 599Œ606block diagrams for, 170
Booch™s architecture catalog and, 170
decisions, 171Œ73, 192
4+1 view model, 173Œ74
levels of abstraction, 169
maintenance and, 172Œ73, 178
model-driven architecture (MDA), 159Œ62
non-functional requirements for, 169, 172Œ73
object-oriented systems, 201Œ02
patterns, 175Œ84, 192
refactoring and, 168
security and, 172, 388, 392Œ395
structural models for, 149
system development and, 570Œ71
systems of systems (SoS), 595, 599Œ606
views, 173Œ75, 192architectural frameworks, 600Œ02
architectural patterns (styles), 172client-server architecture, 180Œ82, 501, 503Œ06, 517container systems, 603Œ05
data-feed systems, 602Œ03