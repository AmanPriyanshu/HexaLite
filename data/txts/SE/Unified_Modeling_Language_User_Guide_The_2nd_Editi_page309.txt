Structural elements are discussed in Sections 2 and 3. Collaborations have two aspects: a structural part that specifies the classes, interfaces, and other elements that work together to carry out the named collaboration, and a behavioral part that specifies the dynamics of how those elements interact. Classifiers are discussed in Chapter 9; relationships are discussed in Chapters 5 and 10. The structural part of a collaboration may include any combination of classifiers, such as classes, interfaces, components, and nodes. Within a collaboration, these classifiers may be organized using all the usual UML relationships, including associations, generalizations, and dependencies. In fact, the structural aspects of a collaboration may use the full range of the UML's structural modeling facilities. Packages are discussed in Chapter 12; subsystems are discussed in Chapter 31; use cases are discussed in Chapter 16. However, unlike packages or subsystems, a collaboration does not own any of its structural elements. Rather, a collaboration simply references or uses the classes, interfaces, components, nodes, and other structural elements that are declared elsewhere. That's why a collaboration names a conceptual chunk# not a physical chunk#of a system's architecture. Therefore, a collaboration may cut across many levels of a system. Furthermore, the same element may appear in more than one collaboration (and some elements will not be named as part of any collaboration at all). For example, given a Web-based retail system described by a dozen or so use cases (such as Purchase Items, Return Items, and Query Order), each use case will be realized by a single collaboration. In addition, each of these collaborations will share some of the same structural elements (such as the classes Customer and Order), but they will be organized in different ways. You'll also find collaborations deeper inside the system, which represent architecturally significant mechanisms. For example, in this same retail system, you might have a collaboration called Internode messaging that specifies the details of secure messaging among nodes. Class diagrams are discussed in Chapter 8. Given a collaboration that names a conceptual chunk of a system, you can zoom inside that collaboration to expose the structural details of its parts. For example, Figure 27-2 illustrates how zooming inside the collaboration Internode messaging might reveal the following set of classes, rendered in a class diagram. Figure 27-2 Structural Aspects of a Collaboration 