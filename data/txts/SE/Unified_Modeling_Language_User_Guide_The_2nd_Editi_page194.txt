You use an extend relationship to model the part of a use case the user may see as optional system behavior. In this way, you separate optional behavior from mandatory behavior. You may also use an extend relationship to model a separate subflow that is executed only under given conditions. Finally, you may use an extend relationship to model several flows that may be inserted at a certain point, governed by explicit interaction with an actor. Dependency relationships are discussed in Chapters 5and10; stereotypes and extra compartments are discussed in Chapter 6. You render an extend relationship as a dependency, stereotyped as extend. You may list the extension points of the base use case in an extra compartment. These extension points are just labels that may appear in the flow of the base use case. For example, the flow for Place order might read as follows: Main flow of events:   include (Validate user). Collect the user's order items. (set priority). Submit the order for processing. In this example, set priority is an extension point. A use case may have more than one extension point (which may appear more than once), and these are always matched by name. Under normal circumstances, this base use case will execute without regard for the priority of the order. If, on the other hand, this is an instance of a priority order, the flow for this base case will carry out as above. But at the extension point (set priority), the behavior of the extending use case (Place rush order) will be performed, then the flow will resume. If there are multiple extension points, the extending use case will simply fold in its flows in order. Note Organizing your use cases by extracting common behavior (through include relationships) and distinguishing variants (through extend relationships) is an important part of creating a simple, balanced, and understandable set of use cases for your system.  Other Features Attributes and operations are discussed in Chapter 4. Use cases are classifiers, so they may have attributes and operations that you may render just as for classes. You can think of these attributes as the objects inside the use case that you need to describe its outside behavior. Similarly, you can think of these operations as the actions of the system you need to describe a flow of events. These objects and operations may be used in your interaction diagrams to specify the behavior of the use case. State machines are discussed in Chapter 21. As classifiers, you can also attach state machines to use cases. You can use state machines as yet another way to describe the behavior represented by a use case. Common Modeling Techniques Modeling the Behavior of an Element 