The UML does not dictate which models you should use to visualize, specify, construct, and document a system, although the Rational Unified Process does suggest a proven set of models.  Trace Relationships are discussed in Chapters 5 and 10. Specifying relationships among elements such as classes, interfaces, components, and nodes is an important structural part of any model. Specifying the relationships among elements such as documents, diagrams, and packages that live in different models is an important part of managing the development artifacts of complex systems, many of which may exist in multiple versions. Dependencies are discussed in Chapter 5; stereotypes are discussed in Chapter 6. In the UML, you can model the conceptual relationship among elements that live in different models by using a trace relationship; a trace may not be applied among elements in the same model. A trace is represented as a stereotyped dependency. You can often ignore the direction of this dependency, although you'll typically direct it to the older or more-specific element, as in Figure 31-2. The two most common uses for the trace relationship are to trace from requirements to implementation (and all the artifacts in between) and to trace from version to version. Figure 31-2 Trace Relationships  Note Most of the time, you will not want to render trace relationships explicitly but, rather, will treat them as hyperlinks. Common Modeling Techniques Modeling the Architecture of a System Architecture and modeling are discussed in Chapter 1. The most common use for which you'll apply systems and models is to organize the elements you use to visualize, specify, construct, and document a system's architecture. Ultimately, this touches virtually all the artifacts you'll find in a software development project. When you model a system's architecture, you capture decisions about the system's requirements, its logical elements, and its physical elements. You'll also model both structural and behavioral aspects of 