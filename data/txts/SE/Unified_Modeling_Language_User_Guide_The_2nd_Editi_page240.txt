Figure 20-7 models a hierarchy of exceptions that may be raised by a standard library of container classes, such as the template class Set. This hierarchy is headed by the abstract signal Exception and includes three specialized exceptions: Duplicate, Overflow, and Underflow. As shown, the add operation raises Duplicate and Overflow exceptions, and the remove operation raises only the Underflow exception. Alternatively, you could have put these dependencies in the background by naming them in each operation's specification. Either way, by knowing which exceptions each operation may send, you can create clients that use the Set class correctly. Figure 20-7 Modeling Exceptions  Hints and Tips When you model an event, · Build hierarchies of signals so that you exploit the common properties of related signals. · Don't use sending signals, and especially sending exceptions, as a replacement for normal flow of control. · Be sure you have a suitable state machine behind each element that may receive the event. · Be sure to model not only those elements that may receive events, but also those elements that may send them. When you draw an event in the UML, · In general, model hierarchies of events explicitly, but model their use in the backplane of each class or operation that sends or receives such an event. Chapter 21. State Machines In this chapter · States, transitions, and activities 