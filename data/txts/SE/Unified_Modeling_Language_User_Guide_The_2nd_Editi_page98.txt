Contents Classes are discussed in Chapters 4 and 9; interfaces are discussed in Chapter 11; collaborations are discussed in Chapter 27; relationships are discussed in Chapters 5 and 10; packages are discussed in Chapter 12; subsystems are discussed in Chapter 31; instances are discussed in Chapter 13. Class diagrams commonly contain the following things: 路 Classes 路 Interfaces 路 Collaborations 路 Dependency, generalization, and association relationships Like all other diagrams, class diagrams may contain notes and constraints. Class diagrams may also contain packages or subsystems, both of which are used to group elements of your model into larger chunks. Sometimes, you'll want to place instances in your class diagrams, as well, especially when you want to visualize the (possibly dynamic) type of an instance. Note Component diagrams and deployment diagrams are similar to class diagrams, except that instead of containing classes, they contain components and nodes, respectively.  Common Uses Design views are discussed in Chapter 2. You use class diagrams to model the static design view of a system. This view primarily supports the functional requirements of a system#the services the system should provide to its end users. When you model the static design view of a system, you'll typically use class diagrams in one of three ways. Modeling the vocabulary of a system is discussed in Chapter 4. 1. To model the vocabulary of a system Modeling the vocabulary of a system involves making a decision about which abstractions are a part of the system under consideration and which fall outside its boundaries. You use class diagrams to specify these abstractions and their responsibilities. Collaborations are discussed in Chapter 27. 2. To model simple collaborations A collaboration is a society of classes, interfaces, and other elements that work together to provide some cooperative behavior that's bigger than the sum of all the elements. For example, when you're modeling the semantics of a transaction in a distributed system, you can't just stare 