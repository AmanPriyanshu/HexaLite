This figure is a good example of a diagram generated by reverse engineering an existing system. Reverse engineering is the creation of a model from code.  This figure makes it clear that HelloWorld is just a leaf in a larger hierarchy of classes. HelloWorld is a child of Applet; Applet is a child of Panel; Panel is a child of Container; Container is a child of Component; and Component is a child of Object, which is the parent class of every class in Java. This model thus matches the Java library#each child extends some parent. Interfaces are discussed in Chapter 11. The relationship between ImageObserver and Component is a bit different, and the class diagram reflects this difference. In the Java library, ImageObserver is an interface, which, among other things, means that it has no implementation and instead requires that other classes implement it. As the figure shows, you can represent an interface in the UML as a circle. The fact that Component implements ImageObserver is represented by the solid line from the implementation (Component) to its interface (ImageObserver). As these figures show, HelloWorld collaborates directly with only two classes (Applet and Graphics), and these two classes are but a small part of the larger library of predefined Java classes. To manage this large collection, Java organizes its interfaces and classes in a number of different packages. The root package in the Java environment is named, not surprisingly, java. Nested inside this package are several other packages, which contain other packages, interfaces, and classes. Object lives in the package lang, so its full path name is java.lang.Object. Similarly, Panel, Container, and Component live in awt; the class Applet lives in the package applet. The interface ImageObserver lives in the package image, which in turn lives in the package awt, so its full path name is the rather lengthy string java.awt.image.ImageObserver. You can visualize this packaging in a class diagram, shown in Figure 3-4. Figure 3-4 HelloWorld Packaging  Packages are discussed in Chapter 12. As this figure shows, packages are represented in the UML as a tabbed folders. Packages may be nested, and the dashed directed lines represent dependencies among these packages. For example, HelloWorld depends on the package java.applet, and java.applet depends on the package java.awt. 