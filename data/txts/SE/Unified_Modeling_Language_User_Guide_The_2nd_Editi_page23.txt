· Architecture · Design · Source code · Project plans · Tests · Prototypes · Releases Depending on the development culture, some of these artifacts are treated more or less formally than others. Such artifacts are not only the deliverables of a project, they are also critical in controlling, measuring, and communicating about a system during its development and after its deployment. The UML addresses the documentation of a system's architecture and all of its details. The UML also provides a language for expressing requirements and for tests. Finally, the UML provides a language for modeling the activities of project planning and release management. Where Can the UML Be Used? The UML is intended primarily for software-intensive systems. It has been used effectively for such domains as · Enterprise information systems · Banking and financial services · Telecommunications · Transportation · Defense/aerospace · Retail · Medical electronics · Scientific · Distributed Web-based services The UML is not limited to modeling software. In fact, it is expressive enough to model nonsoftware systems, such as workflow in the legal system, the structure and behavior of a patient healthcare system, and the design of hardware. A Conceptual Model of the UML To understand the UML, you need to form a conceptual model of the language, and this requires learning three major elements: the UML's basic building blocks, the rules that dictate how those building blocks may be put together, and some common mechanisms that apply throughout the UML. Once you have grasped these ideas, you will be able to read UML models and create some 