2 CHAPTER 1  
THE NATURE OF SOFTWARE
 
 
He paused and thought for a moment. Then he slowly nodded. “We adapt them 
to our needs, but sure, we use them.”   
“Where?” I asked, probing.  “Our problem is often translating the requirements the creatives give us.”  “The creatives?” I interrupted.  “You know, the guys who design the story, the characters, all the stuff that 
make the game a hit. We have to take what they give us and produce a set of 

technical requirements that allow us to build the game.”  “And after the requirements are established?”  He shrugged. “We have to extend and adapt the architecture of the previous 
version of the game and create a new product. We have to create code from the 

requirements, test the code with daily builds, and do lots of things that your book 
recommends.”  “You know my book?” I was honestly surprised. 
 “Sure, used it in school. There’s a lot there.” 
 “I’ve talked to some of your buddies here, and they’re more skeptical about the stuff in my book.”  He frowned. “Look, we’re not an IT department or an aerospace company, so we 
have to customize what you advocate. But the bottom line is the same—we need 

to produce a high-quality product, and the only way we can accomplish that in a 

repeatable fashion is to adapt our own subset of software engineering techniques.” 
 “And how will your subset change as the years pass?”  He paused as if to ponder the future. “Games will become bigger and more complex, that’s for sure. And our development timelines will shrink as more 

competition emerges. Slowly, the games themselves will force us to apply a bit 

more development discipline. If we don’t, we’re dead.”   
 
 
Computer software continues to be the single most important technology on the world stage. And it’s also a prime example of the law of unintended conse-

quences. Sixty years ago no one could have predicted that software would be-
come an indispensable technology for business, science, and engineering; that 
software would enable the creation of new technologies (e.g., genetic engineer-

ing and nanotechnology), the extension of existing technologies (e.g., telecom-
munications), and the radical change in older technologies (e.g., the media); 
that software would be the driving force behind the personal computer revolu-
tion; that software applications would be purchased by consumers using their 
smart phones; that software would slowly evolve from a product to a service as 
“on-demand” software companies deliver just-in-time functionality via a Web 

browser; that a software company would become larger and more inﬂ uential 
than all industrial-era companies; that a vast software-driven network would 
evolve and change everything from library research to consumer shopping to 
political discourse to the dating habits of young (and not so young) adults.   
No one could foresee that software would become embedded in systems of 
all kinds: transportation, medical, telecommunications, military, industrial, 
  uote:  “Ideas and 
technological 
discoveries are the 
driving engines of 
economic growth.”    Wall Street 
Journal  pre22126_ch01_001-013.indd   2pre22126_ch01_001-013.indd   213/12/13   10:00 PM13/12/13   10:00 PM