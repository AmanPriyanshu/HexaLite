When you view a software system from any perspective using the UML, you use diagrams to organize the elements of interest. The UML defines nine kinds of diagrams, which you can mix and match to assemble each view. For example, the static aspects of a system's implementation view might be visualized using component diagrams; the dynamic aspects of the same implementation view might be visualized using interaction diagrams. Similarly, the static aspects of a system's database might be visualized using class diagrams; its dynamic aspects might be visualized using collaboration diagrams. Of course, you are not limited to these nine diagrams. In the UML, these nine are defined because they represent the most common packaging of viewed elements. To fit the needs of your project or organization, you can create your own kinds of diagrams to view UML elements in different ways. This incremental and iterative process is summarized in Appendix C. You'll use the UML's diagrams in two basic ways: to specify models from which you'll construct an executable system (forward engineering) and to reconstruct models from parts of an executable system (reverse engineering). Either way, just like a building architect, you'll tend to create your diagrams incrementally (crafting them one piece at a time) and iteratively (repeating the process of design a little, build a little). Terms and Concepts Systems, models, and views are discussed in Chapter 31. A system is a collection of subsystems organized to accomplish a purpose and described by a set of models, possibly from different viewpoints. A subsystem is a grouping of elements, of which some constitute a specification of the behavior offered by the other contained elements. A model is a semantically closed abstraction of a system, meaning that it represents a complete and self-consistent simplification of reality, created in order to better understand the system. In the context of architecture, a view is a projection into the organization and structure of a system's model, focused on one aspect of that system. A diagram is the graphical presentation of a set of elements, most often rendered as a connected graph of vertices (things) and arcs (relationships). To put it another way, a system represents the thing you are developing, viewed from different perspectives by different models, with those views presented in the form of diagrams. A diagram is just a graphical projection into the elements that make up a system. For example, you might have several hundred classes in the design of a corporate human resources system. You could never visualize the structure or behavior of that system by staring at one large diagram containing all these classes and all their relationships. Instead, you'd want to create several diagrams, each focused on one view. For example, you might find one class diagram that includes classes, such as Person, Department, and Office, assembled to construct a database schema. You might find some of these same classes, along with other classes, in another diagram that presents an API that's used by client applications. You'd likely see some of these same classes mentioned in an interaction diagram, specifying the semantics of a transaction that reassigns a Person to a new Department. As this example shows, the same thing in a system (such as the class Person) may appear multiple times in the same diagram or even in different diagrams. In each case, it's the same thing. Each diagram provides a view into the elements that make up the system. In modeling real systems, no matter what the problem domain, you'll find yourself creating the same kinds of diagrams, because they represent common views into common models. Typically, you'll view the static parts of a system using one of the four following diagrams. 1. Class diagram 