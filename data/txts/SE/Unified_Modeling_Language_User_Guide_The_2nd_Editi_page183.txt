Use cases are discussed in Chapter 16; patterns and frameworks are discussed in Chapter 28; classes and operations are discussed in Chapters 4 and 9; interfaces are discussed in Chapter 11; components are discussed in Chapter 25; nodes are discussed in Chapter 26; you can also model the dynamic aspects of a system by using state machines, as discussed in Chapter 21. The most common purpose for which you'll use interactions is to model the flow of control that characterizes the behavior of a system as a whole, including use cases, patterns, mechanisms, and frameworks, or the behavior of a class or an individual operation. Whereas classes, interfaces, components, nodes, and their relationships model the static aspects of your system, interactions model its dynamic aspects. When you model an interaction, you essentially build a storyboard of the actions that take place among a set of objects. Techniques such as CRC cards are particularly useful in helping you to discover and think about such interactions. To model a flow of control, · Set the context for the interaction, whether it is the system as a whole, a class, or an individual operation. · Set the stage for the interaction by identifying which objects play a role; set their initial properties, including their attribute values, state, and role. · If your model emphasizes the structural organization of these objects, identify the links that connect them, relevant to the paths of communication that take place in this interaction. Specify the nature of the links using the UML's standard stereotypes and constraints, as necessary. · In time order, specify the messages that pass from object to object. As necessary, distinguish the different kinds of messages; include parameters and return values to convey the necessary detail of this interaction. · Also to convey the necessary detail of this interaction, adorn each object at every moment in time with its state and role. Sequence diagrams are discussed in Chapter 18. For example, Figure 15-6 shows a set of objects that interact in the context of a publish and subscribe mechanism (an instance of the observer design pattern). This figure includes three objects: p (a StockQuotePublisher), s1, and s2 (both instances of StockQuoteSubscriber). This figure is an example of a sequence diagram, which emphasizes the time order of messages. Figure 15-6 Flow of Control by Time 