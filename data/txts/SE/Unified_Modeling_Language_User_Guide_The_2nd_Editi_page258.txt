When you model state machines in the UML, remember that every state machine represents the dynamic aspects of an individual object, typically representing an instance of a class, a use case, or the system as a whole. A well-structured state machine · Is simple and therefore should not contain any superfluous states or transitions. · Has a clear context and therefore may have access to all the objects visible to its enclosing object (these neighbors should be used only as necessary to carry out the behavior specified by the state machine). · Is efficient and therefore should carry out its behavior with an optimal balance of time and resources as required by the actions it dispatches. · Is understandable and therefore should name its states and transitions from the vocabulary of the system. · Is not nested too deeply (nesting substates at one or two levels will handle most complex behaviors). · Uses concurrent substates sparingly as using active classes is often a better alternative. Modeling the vocabulary of a system is discussed in Chapter 4. When you draw a state machine in the UML, · Avoid transitions that cross. · Expand composite states in place only as necessary to make the diagram understandable. Chapter 22. Processes and Threads In this chapter · Active objects, processes, and threads · Modeling multiple flows of control · Modeling interprocess communication · Building thread-safe abstractions Process views in the context of softwarearchitecture are discussed in Chapter 2. Not only is the real world a harsh and unforgiving place, but it is a very busy place, as well. Events may happen and things may take place all at the same time. Therefore, when you model a system of the real world, you must take into account its process view, which encompasses the threads and processes that form the system's concurrency and synchronization mechanisms. In the UML, you model each independent flow of control as an active object that represents a process or thread that can initiate control activity. A process is a heavyweight flow that can execute concurrently with other processes; a thread is a lightweight flow that can execute concurrently with other threads within the same process. Building abstractions so that they work safely in the presence of multiple flows of control is hard. In particular, you have to consider approaches to communication and synchronization that are more complex than for sequential systems. You also have to be careful to neither over-engineer 