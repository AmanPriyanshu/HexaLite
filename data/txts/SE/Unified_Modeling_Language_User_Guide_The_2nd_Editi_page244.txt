Active objects are discussed in Chapter 22; modeling reactive systems is discussed in Chapter 24; use cases and actors are discussed in Chapter 16; interactions are discussed in Chapter 15; interfaces are discussed in Chapter 11. The behavior of objects that must respond to asynchronous stimulus or whose current behavior depends on their past is best specified by using a state machine. This encompasses instances of classes that can receive signals, including many active objects. In fact, an object that receives a signal but has no state machine will simply ignore that signal. You'll also use state machines to model the behavior of entire systems, especially reactive systems, which must respond to signals from actors outside the system. Note Most of the time, you'll use interactions to model the behavior of a use case, but you can also apply state machines for the same purpose. Similarly, you can apply state machines to model the behavior of an interface. Although an interface may not have any direct instances, a class that realizes such an interface may. Such a class must conform to the behavior specified by the state machine of this interface.  States A state is a condition or situation during the life of an object during which it satisfies some condition, performs some activity, or waits for some event. An object remains in a state for a finite amount of time. For example, a Heater in a home might be in any of four states: Idle (waiting for a command to start heating the house), Activating (its gas is on, but it's waiting to come up to temperature), Active (its gas and blower are both on), and ShuttingDown (its gas is off but its blower is on, flushing residual heat from the system). You can visualize the state of an object in an interaction, as discussed in Chapter 13; a state name must be unique within its enclosing state, in conformance with the rules discussed in Chapter 12; the last four parts of a state are discussed in later sections of this chapter. When an object's state machine is in a given state, the object is said to be in that state. For example, an instance of Heater might be Idle or perhaps ShuttingDown. Astate has several parts. 1. Name  A textual string that distinguishes the state from other states; a state may be anonymous, meaning that it has no name 2. Entry/exit actions  Actions executed on entering and exiting the state, respectively 3. Internal transitions  Transitions that are handled without causing a change in state 4. Substates  The nested structure of a state, involving disjoint (sequentially active) or concurrent (concurrently active) substates 5. Deferred events  A list of events that are not handled in that state but, rather, are postponed and queued for handling by the object in another state Note A state name may be text consisting of any number of letters, numbers, and certain punctuation marks (except for marks such as the colon) and may continue over several lines. In practice, state names are short nouns or noun phrases drawn from 