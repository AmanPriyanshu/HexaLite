The UML's standard elements are summarized in Appendix B. The UML defines two standard stereotypes that apply to the dependency relationships among objects and among classes: 1. instanceOf  Specifies that the client object is an instance of the supplier classifier 2. instantiate  Specifies that the client class creates instances of the supplier class Become and copy are discussed in Chapter 18. There are also two stereotypes related to objects that apply to messages and transitions: 1. become  Specifies that the client is the same object as the supplier, but at a later time and with possibly different values, state, or roles 2. copy  Specifies that the client object is an exact but independent copy of the supplier Persistence is discussed in Chapter 29; interactions are discussed in Chapter 15. The UML defines a standard constraint that applies to objects: $ transient  Specifies that an instance of the role is created during execution of the enclosing interaction but is destroyed before completion of execution Common Modeling Techniques Modeling Concrete Instances When you model concrete instances, you are in effect visualizing things that live in the real world. You can't exactly see an instance of a Customer class, for example, unless that customer is standing beside you; in a debugger, you might be able to see a representation of that object, however. Component diagrams are discussed in Chapter 29; deployment diagrams are discussed in Chapter 30; object diagrams are discussed in Chapter 14. One of the things for which you'll use objects is to model concrete instances that exist in the real world. For example, if you want to model the topology of your organization's network, you'll use deployment diagrams containing instances of nodes. Similarly, if you want to model the components that live on the physical nodes in this network, you'll use component diagrams containing instances of the components. Finally, suppose you have a debugger connected to your running system; it can present the structural relationships among instances by rendering an object diagram. To model concrete instances, 路 Identify those instances necessary and sufficient to visualize, specify, construct, or document the problem you are modeling. 路 Render these objects in the UML as instances. Where possible, give each object a name. If there is no meaningful name for the object, render it as an anonymous object. 路 Expose the stereotype, tagged values, and attributes (with their values) of each instance necessary and sufficient to model your problem. 路 Render these instances and their relationships in an object diagram or other diagram appropriate to the kind of the instance. 