Standard Elements The UML's extensibility mechanisms are discussed in Chapter 6. All of the UML's extensibility mechanisms apply to packages. Most often, you'll use tagged values to add new package properties (such as specifying the author of a package) and stereotypes to specify new kinds of packages (such as packages that encapsulate operating system services). The UML's standard elements are summarized in Appendix B. The UML defines five standard stereotypes that apply to packages. 1. facade  Specifies a package that is only a view on some other package 2. framework  Specifies a package consisting mainly of patterns 3. stub  Specifies a package that serves as a proxy for the public contents of another package 4. subsystem  Specifies a package representing an independent part of the entire system being modeled 5. system  Specifies a package representing the entire system being modeled Dependencies are discussed in Chapters 5 and 10. The UML does not specify icons for any of these stereotypes. In addition to these five package stereotypes, you'll also use dependencies designated using the standard stereotype import. Frameworks are discussed in Chapter 28; systems and subsystems are discussed in Chapter 31. Most of these standard elements are discussed elsewhere, except for facade and stub. These two stereotypes help you to manage very large models. You use facades to provide elided views on otherwise complex packages. For example, your system might contain the package BusinessModel. You might want to expose a subset of its elements to one set of users (to show only those elements associated with customers), and another subset to a different set of users (to show only those elements associated with products). To do so, you would define facades, which import (and never own) only a subset of the elements in another package. You use stubs when you have tools that split apart a system into packages that you manipulate at different times and potentially in different places. For example, if you have a development team working in two locations, the team at one site would provide a stub for the packages the other team required. This strategy lets the teams work independently without disturbing each other's work, with the stub packages capturing the seams in the system that must be managed carefully. Common Modeling Techniques Modeling Groups of Elements The most common purpose for which you'll use packages is to organize modeling elements into groups that you can name and manipulate as a set. If you are developing a trivial application, you won't need packages at all. All your abstractions will fit nicely into one package. For every other system, however, you'll find that many of your system's classes, interfaces, components, nodes, and even diagrams tend to naturally fall into groups. You model these groups as packages. Systems and subsystems, which are similar to packages but have identity, are discussed in Chapter 31. 