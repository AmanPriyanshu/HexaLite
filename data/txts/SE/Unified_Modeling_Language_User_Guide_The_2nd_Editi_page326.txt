Chapter 29. Component Diagrams In this chapter · Modeling source code · Modeling executable releases · Modeling physical databases · Modeling adaptable systems · Forward and reverse engineering Deployment diagrams, the second kind of diagram used in modeling he physical aspects of an object- oriented system, are discussed in Chapter 30. Component diagrams are one of the two kinds of diagrams found in modeling the physical aspects of object-oriented systems. A component diagram shows the organization and dependencies among a set of components. You use component diagrams to model the static implementation view of a system. This involves modeling the physical things that reside on a node, such as executables, libraries, tables, files, and documents. Component diagrams are essentially class diagrams that focus on a system's components. Component diagrams are not only important for visualizing, specifying, and documenting component-based systems, but also for constructing executable systems through forward and reverse engineering. Getting Started When you build a house, you must do more than create blueprints. Mind you, blueprints are important because they help you visualize, specify, and document the kind of house you want to build so that you'll build the right house at the right time at the right price. Eventually, however, you've got to turn your floor plans and elevation drawings into real walls, floors, and ceilings made of wood, stone, or metal. Not only will you build your house out of these raw materials, you'll also incorporate pre-built components, such as cabinets, windows, doors, and vents. If you are renovating a house, you'll reuse even larger components, such as whole rooms and frameworks. It's the same with software. You create use case diagrams to reason about the desired behavior of your system. You specify the vocabulary of your domain with class diagrams. You create sequence diagrams, collaboration diagrams, statechart diagrams, and activity diagrams to specify the way the things in your vocabulary work together to carry out this behavior. Eventually, you will turn these logical blueprints into things that live in the world of bits, such as executables, libraries, tables, files, and documents. You'll find that you must build some of these components from scratch, but you'll also end up reusing older components in new ways. With the UML, you use component diagrams to visualize the static aspect of these physical components and their relationships and to specify their details for construction, as in Figure 29-1. Figure 29-1 A Component Diagram 