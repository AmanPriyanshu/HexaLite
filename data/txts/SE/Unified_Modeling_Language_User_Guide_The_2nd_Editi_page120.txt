When you model the things that form the vocabulary of your system, you must also model how those things stand in relationship to one another. Relationships can be complex, however. Visualizing, specifying, constructing, and documenting webs of relationships require a number of advanced features. The basic properties of relationships are discussed in Chapter 5; interfaces are discussed in Chapter 11; components are discussed in Chapter 25; use cases are discussed in Chapter 16; collaborations are discussed in Chapter 27. Dependencies, generalizations, and associations are the three most important relational building blocks of the UML. These relationships have a number of properties beyond those described in the previous section. You can also model multiple inheritance, navigation, composition, refinement, and other characteristics. Using a fourth kind of relationship#realization#you can model the connection between an interface and a class or component, or between a use case and a collaboration. In the UML, you can model the semantics of relationships to any degree of formality. Managing complex webs of relationships requires that you use the right relationships at the level of detail so that you neither under- nor over-engineer your system. Getting Started Use cases andscenarios are discussed in Chapter 16. If you are building a house, deciding where to place each room in relation to others is a critical task. At one level of abstraction, you might decide to put the master bedroom on the main level, away from the front of the house. You might next think through common scenarios to help you reason about the use of this room arrangement. For example, consider bringing in groceries from the garage. It wouldn't make sense to walk from the garage through your bedroom to get to the kitchen, so that's an arrangement you'd reject. You can form a fairly complete picture of your house's floor plan just by thinking through these basic relationships and use cases. However, that's not enough. You can end up with some real flaws in your design if you don't consider more-complex relationships. For example, you might like the arrangement of rooms on each floor, but rooms on different floors might interact in unforeseen ways. Suppose you place your teenager daughter's room right above your bedroom. Now, suppose your teenager decides to learn how to play the drums. You'd clearly want to reject that floor plan, too. Similarly, you have to consider how underlying mechanisms in the house might interact with your floor plan. For example, you'll increase the cost of construction if you don't arrange your rooms so that you have common walls in which to run pipes and drains. Forward andreverse engineering are discussed in Chapters 8, 14, 17, 18, 19, 24, 29, and 30. It's the same when you build software. Dependencies, generalizations, and associations are the most common relationships you'll encounter when modeling software-intensive systems. However, you need a number of advanced features of these relationships in order to capture the details of many systems# details that are important for you to consider so that you avoid real flaws in your design. The UML provides a representation for a number of advanced properties, as Figure 10-1 shows. This notation permits you to visualize, specify, construct, and document webs of relationships to any level of detail you wish, even sufficient to support forward and reverse engineering of models and code. 