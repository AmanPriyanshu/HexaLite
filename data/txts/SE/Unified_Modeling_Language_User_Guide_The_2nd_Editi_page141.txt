Preconditions,postconditions, andinvariants are discussed in Chapter 9;state machines are discussed in Chapter 21;collaborations are discussed in Chapter 27; OCL is discussed in Chapter 6. In the UML, you can supply much more information to an interface in order to make it understandable and approachable. First, you may attach pre- and postconditions to each operation and invariants to the class or component as a whole. By doing this, a client who needs to use an interface will be able to understand what the interface does and how to use it, without having to dive into an implementation. If you need to be rigorous, you can use the UML's OCL to formally specify the semantics. Second, you can attach a state machine to the interface. You can use this state machine to specify the legal partial ordering of an interface's operations. Third, you can attach collaborations to the interface. You can use collaborations to specify the expected behavior of the interface through a series of interaction diagrams. Types and Roles A class may realize many interfaces. An instance of that class must therefore support all those interfaces, because an interface defines a contract, and any abstraction that conforms to that interface must, by definition, faithfully carry out that contract. Nonetheless, in a given context, an instance may present only one or more of its interfaces as relevant. In that case, each interface represents a role that the object plays. A role names a behavior of an entity participating in a particular context. Stated another way, a role is the face that an abstraction presents to the world. Roles also play a part in collaborations, as discussed in Chapter 27. For example, consider an instance of the class Person. Depending on the context, that Person instance may play the role of Mother, Comforter, PayerOfBills, Employee, Customer, Manager, Pilot, Singer, and so on. When an object plays a particular role, it presents a face to the world, and clients that interact with it expect a certain behavior depending on the role that it plays at the time. For example, an instance of Person in the role of Manager would present a different set of properties than if the instance were playing the role of Mother. Associations are discussed in Chapters 5 and 10. In the UML, you can specify a role an abstraction presents to another abstraction by adorning the name of an association end with a specific interface. For example, Figure 11-5 shows the interface Employee, whose definition includes three operations. There exists an association between the classes Person and Company in which context Person plays the role e, whose type is Employee. In a different association, the Person might present an entirely different face to the world. With this explicit type, the role the Person plays is more than just a name meaningful to the human reader of this diagram. In the UML, this means that the Person presents the role of Employee to the Company, and in that context, only the properties specified by Employee are visible and relevant to the Company. Figure 11-5 Roles  