You don't show the links among objects explicitly in a sequence diagram. You don't show the sequence number of a message in a sequence diagram explicitly either: it is implicit in the physical ordering of messages from top to bottom of the diagram. You can show iteration and branching, however. In a sequence diagram, the alternative paths of a branch are rendered by separate messages branching from the same point. Pragmatically, you can show only simple branching in sequence diagrams; you can show more complex branching in collaboration diagrams.  Semantic Equivalence Because they both derive from the same information in the UML's metamodel, sequence diagrams and collaboration diagrams are semantically equivalent. As a result, you can take a diagram in one form and convert it to the other without any loss of information, as you can see in the previous two figures, which are semantically equivalent. However, this does not mean that both diagrams will explicitly visualize the same information. For example, in the previous two figures, the collaboration diagram shows how the objects are linked (note the  local! and  global! stereotypes), whereas the corresponding sequence diagram does not. Similarly, the sequence diagram shows message return (note the return value committed), but the corresponding collaboration diagram does not. In both cases, the two diagrams share the same underlying model, but each may render some things the other does not. Common Uses The five views of an architecture are discussed in Chapter 2; instances are discussed in Chapter 13; classes are discussed in Chapters 4 and 9; active classes are discussed in Chapter 22; interfaces are discussed in Chapter 11; components are discussed in Chapter 25; nodes are discussed in Chapter 26; systems and subsystems are discussed in Chapter 31; operations are discussed in Chapters 4 and 9; use cases are discussed in Chapter 16; collaborations are discussed in Chapter 27. You use interaction diagrams to model the dynamic aspects of a system. These dynamic aspects may involve the interaction of any kind of instance in any view of a system's architecture, including instances of classes (including active classes), interfaces, components, and nodes. When you use an interaction diagram to model some dynamic aspect of a system, you do so in the context of the system as a whole, a subsystem, an operation, or a class. You can also attach interaction diagrams to use cases (to model a scenario) and to collaborations (to model the dynamic aspects of a society of objects). When you model the dynamic aspects of a system, you typically use interaction diagrams in two ways. 1. To model flows of control by time ordering Here you'll use sequence diagrams. Modeling a flow of control by time ordering emphasizes the passing of messages as they unfold over time, which is a particularly useful way to visualize dynamic behavior in the context of a use case scenario. Sequence diagrams do a better job of visualizing simple iteration and branching than do collaboration diagrams. 2. To model flows of control by organization Here you'll use collaboration diagrams. Modeling a flow of control by organization emphasizes the structural relationships among the instances in the interaction, along which messages may be 