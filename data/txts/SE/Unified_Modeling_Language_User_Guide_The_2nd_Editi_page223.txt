 Active objects are discussed in Chapter 22; signals are discussed in Chapter 20. As the figure also shows, a join represents the synchronization of two or more concurrent flows of control. A join may have two or more incoming transitions and one outgoing transition. Above the join, the activities associated with each of these paths continues in parallel. At the join, the concurrent flows synchronize, meaning that each waits until all incoming flows have reached the join, at which point one flow of control continues on below the join. Note Joins and forks should balance, meaning that the number of flows that leave a fork should match the number of flows that enter its corresponding join. Also, activities that are in parallel flows of control may communicate with one another by sending signals. This style of communicating sequential processes is called a coroutine. Most of the time, you model this style of communication using active objects. You can also model the sending of and response to these signals in the submachines associated with each communicating activity state. For example, suppose the activity Stream audio needed to tell the activity Synch mouth when important pauses and intonations occurred. In the state machine for Stream audio, you'd see signals sent to the state machine for Synch mouth. Similarly, in the state machine for Synch mouth, you'd see transitions triggered by these same signals, to which the Synch mouth state machine would respond.  Swimlanes You'll find it useful, especially when you are modeling workflows of business processes, to partition the activity states on an activity diagram into groups, each group representing the 