 A change event is an event that represents a change in state or the satisfaction of some condition. As Figure 20-4 shows, in the UML you model a change event by using the keyword when followed by some Boolean expression. You can use such expressions to mark an absolute time (such as when time = 11:59) or for the continuous test of an expression (for example, when altitude < 1000). Note Although a change event models a condition that is tested continuously, you can typically analyze the situation to see when to test the condition at discrete points in time.  Sending and Receiving Events Processes and threads are discussed in Chapter 22. Signal events and call events involve at least two objects: the object that sends the signal or invokes the operation, and the object to which the event is directed. Because signals are asynchronous, and because asynchronous calls are themselves signals, the semantics of events interact with the semantics of active objects and passive objects. Instances are discussed in Chapter 13. Any instance of any class can send a signal to or invoke an operation of a receiving object. When an object sends a signal, the sender dispatches the signal and then continues along its flow of control, not waiting for any return from the receiver. For example, if an actor interacting with an ATM system sends the signal pushButton, the actor may continue along its way independent of the system to which the signal was sent. In contrast, when an object calls an operation, the sender dispatches the operation and then waits for the receiver. For example, in a trading system, an instance of the class Trader might invoke the operation confirmTransaction on some instance of the class Trade, thereby affecting the state of the Trade object. If this is a synchronous call, the Trader object will wait until the operation is finished. 