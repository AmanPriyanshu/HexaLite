 Note A component name may be text consisting of any number of letters, numbers, and certain punctuation marks (except for marks such as the colon, which is used to separate a component name and the name of its enclosing package) and may continue over several lines. In practice, component names are short nouns or noun phrases drawn from the vocabulary of the implementation and, depending on your target operating system, include extensions (such as java and dll).  Components and Classes Classes are discussed in Chapters 4 and 9; interactions are discussed in Chapter 15. In many ways, components are like classes: Both have names; both may realize a set of interfaces; both may participate in dependency, generalization, and association relationships; both may be nested; both may have instances; both may be participants in interactions. However, there are some significant differences between components and classes. · Classes represent logical abstractions; components represent physical things that live in the world of bits. In short, components may live on nodes, classes may not. · Components represent the physical packaging of otherwise logical components and are at a different level of abstraction. · Classes may have attributes and operations directly. In general, components only have operations that are reachable only through their interfaces. Nodes are discussed in Chapter 26. The first difference is the most important. When modeling a system, deciding if you should use a class or a component involves a simple decision#if the thing you are modeling lives directly on a node, use a component; otherwise, use a class. Dependency relationships are discussed in Chapters 5 and 10; collaborations are discussed in Chapter 27. 