schema to a relational database is not so simple, however. In the presence of inheritance, you have to make decisions about how to map classes to tables. Typically, you can apply one or a combination of three strategies. 1. Define a separate table for each class. This is a simple but naive approach because it introduces maintenance headaches when you add new child classes or modify your parent classes. 2. Collapse your inheritance lattices so that all instances of any class in a hierarchy has the same state. The downside with this approach is that you end up storing superfluous information for many instances. 3. Separate parent and child states into different tables. This approach best mirrors your inheritance lattice, but the downside is that traversing your data will require many cross-table joins. When designing a physical database, you also have to make decisions about how to map operations defined in your logical database schema. Object- oriented databases make the mapping fairly transparent. But, with relational databases, you have to make some decisions about how these logical operations are implemented. Again, you have some choices. 1. For simple CRUD (create, read, update, delete) operations, implement them with standard SQL or ODBC calls. 2. For more-complex behavior (such as business rules), map them to triggers or stored procedures. Given these general guidelines, to model a physical database, 路 Identify the classes in your model that represent your logical database schema. 路 Select a strategy for mapping these classes to tables. You will also want to consider the physical distribution of your databases. Your mapping strategy will be affected by the location in which you want your data to live on your deployed system. 路 To visualize, specify, construct, and document your mapping, create a component diagram that contains components stereotyped as tables. 路 Where possible, use tools to help you transform your logical design into a physical design. The UML's standard elements are summarized in Appendix B. Figure 29-4 shows a set of database tables drawn from an information system for a school. You will find one database (school.db, rendered as a component stereotyped as database) that's composed of five tables: student, class, instructor, department, and course (rendered as a component stereotyped as table, one of the UML's standard elements). In the corresponding logical database schema, there was no inheritance, so mapping to this physical database design is straightforward. Figure 29-4 Modeling a Physical Database 