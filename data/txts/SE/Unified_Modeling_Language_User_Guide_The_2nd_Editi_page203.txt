· For each use case in the diagram, identify its flow of events and its exceptional flow of events. · Depending on how deeply you choose to test, generate a test script for each flow, using the flow's preconditions as the test's initial state and its postconditions as its success criteria. · As necessary, generate test scaffolding to represent each actor that interacts with the use case. Actors that push information to the element or are acted on by the element may either be simulated or substituted by its real-world equivalent. · Use tools to run these tests each time you release the element to which the use case diagram applies. Reverse engineering is the process of transforming code into a model through a mapping from a specific implementation language. Automatically reverse engineering a use case diagram is pretty much beyond the state of the art, simply because there is a loss of information when moving from a specification of how an element behaves to how it is implemented. However, you can study an existing system and discern its intended behavior by hand, which you can then put in the form of a use case diagram. Indeed, this is pretty much what you have to do anytime you are handed an undocumented body of software. The UML's use case diagrams simply give you a standard and expressive language in which to state what you discover. To reverse engineer a use case diagram, · Identify each actor that interacts with the system. · For each actor, consider the manner in which that actor interacts with the system, changes the state of the system or its environment, or responds to some event. · Trace the flow of events in the executable system relative to each actor. Start with primary flows and only later consider alternative paths. · Cluster related flows by declaring a corresponding use case. Consider modeling variants using extend relationships, and consider modeling common flows by applying include relationships. · Render these actors and use cases in a use case diagram, and establish their relationships. Hints and Tips When you create use case diagrams in the UML, remember that every use case diagram is just a graphical presentation of the static use case view of a system. This means that no single use case diagram need capture everything about a system's use case view. Collectively, all the use case diagrams of a system represent the system's complete static use case view; individually, each represents just one aspect. A well-structured use case diagram · Is focused on communicating one aspect of a system's static use case view. · Contains only those use cases and actors that are essential to understanding that aspect. · Provides detail consistent with its level of abstraction; you should expose only those adornments (such as extension points) that are essential to understanding. 