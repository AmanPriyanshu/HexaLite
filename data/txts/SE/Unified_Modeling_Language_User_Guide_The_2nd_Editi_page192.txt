Note Finding the minimal set of well-structured collaborations that satisfy the flow of events specified in all the use cases of a system is the focus of a system's architecture.  Organizing Use Cases Packages are discussed in Chapter 12. You can organize use cases by grouping them in packages in the same manner in which you can organize classes. You can also organize use cases by specifying generalization, include, and extend relationships among them. You apply these relationships in order to factor common behavior (by pulling such behavior from other use cases that it includes) and in order to factor variants (by pushing such behavior into other use cases that extend it). Generalization is discussed in Chapters 5 and 10. Generalization among use cases is just like generalization among classes. Here it means that the child use case inherits the behavior and meaning of the parent use case; the child may add to or override the behavior of its parent; and the child may be substituted any place the parent appears (both the parent and the child may have concrete instances). For example, in a banking system, you might have the use case Validate User, which is responsible for verifying the identify of the user. You might then have two specialized children of this use case (Check password and Retinal scan), both of which behave just like Validate User and may be applied anywhere Validate User appears, yet both of which add their own behavior (the former by checking a textual password, the latter by checking the unique retina patterns of the user). As shown in Figure 16-5, generalization among use cases is rendered as a solid directed line with a large open arrowhead, just like generalization among classes. Figure 16-5 Generalization, Include, and Extend 