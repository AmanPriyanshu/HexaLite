thread  class Specifies a classifier whose instances represent a lightweight flow of control trace  dependency Specifies that the target is an historical ancestor of the source type  class Specifies an abstract class that is used only to specify the structure and behavior (but not the implementa tion) of a set of objects use  dependency Specifies that the semantics of the source element depends on the semantics of the public part of the target utility  class Specifies a class whose attributes and operations are all class-scoped Tagged Values The following tagged values are defined as standard elements of the UML. For each tagged value, this table gives its name, the element of the UML to which it applies, and its meaning. In most cases, a tagged value is rendered by placing the tag name and its value below the name of the element to which it is attached and enclosing the tagged value in braces, as in {location = client}. Tags with long text values may be rendered in a separate compartment at the bottom of the classifier's icon. Tagged value Applies to symbol  Meaning  documentation all elements Specifies a comment, description, or explanation of the element to which it is attached location  most elements Specifies the node or component on which the element resides persistence  class association attribute Specifies if the state of the instance is preserved after the process that cre ated the instance terminates; values are persistent (preserve the value) and transient (do not preserve the value) semantics  class operation Specifies the meaning of the class or operation Constraints The following constraints are defined as standard elements of the UML. For each constraint, this table gives its name, the element of the UML to which it applies, and its meaning. In most cases, a constraint is rendered by placing it adjacent to an element and enclosing the constraint in braces, as in {complete}. You can also render a constraint by placing it in a note connected to its element by a dependency. Constraint Applies to symbol  Meaning  complete  generalization Specifies that all children in the gen eralization have been specified in the model (although some may be elided in the diagram) and that no additional children are permitted destroyed  instance link Specifies that the instance or link is destroyed prior to completion of exe cution of the enclosing interaction disjoint  generalization Specifies that objects of the given parent may have no more than one of the given children as a type implicit  association Specifies that the relationship is not manifest but is only conceptual 