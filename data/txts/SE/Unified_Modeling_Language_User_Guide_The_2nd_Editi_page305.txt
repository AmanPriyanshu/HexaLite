路 Consider duplicate locations for components. It's not uncommon for the same kind of component (such as specific executables and libraries) to reside on multiple nodes simultaneously. 路 Render this allocation in one of three ways. 1. Don't make the allocation visible, but leave it as part of the backplane of your model#that is, in each node's specification. 2. Using dependency relationships, connect each node with the components it deploys. 3. List the components deployed on a node in an additional compartment. Instances are discussed in Chapter 11; object diagrams are discussed in Chapter 14. Using the third approach, Figure 26-6 takes the earlier diagrams and specifies the executable components that reside on each node. This diagram is a bit different from the previous ones in that it is an object diagram, visualizing specific instances of each node. In this case, the RAID farm and kiosk instances are both anonymous and the other two instances are named (c for the console and s for the server). Each processor in this figure is rendered with an additional compartment showing the component it deploys. The server object is also rendered with its attributes (processorSpeed and memory) and their values visible. Figure 26-6 Modeling the Distribution of Components.  The migration of components across nodes is discussed in Chapter 30. Components need not be statically distributed across the nodes in a system. In the UML, it is possible to model the dynamic migration of components from node to node, as in an agent-based system or a high-reliability system that involves clustered servers and replicated databases. Hints and Tips A well-structured node 路 Provides a crisp abstraction of something drawn from the vocabulary of the hardware in your solution domain. 路 Is decomposed only to the level necessary to communicate your intent to the reader. 