860  
 
CHAPTER39  
CONCLUDINGCOMMENTS  
 
 
 
 
 
 
 
In the 38 chapters that have preceded this one, we’ve explored a process for software engineering that encompasses management procedures 
and technical methods, basic concepts and principles, specialized tech-niques, people-oriented activities and tasks that are amenable to automation, 
paper-and-pencil notation, and software tools. We have argued that measure-

ment, discipline, and an overriding focus on agility and quality will result in 
software that meets the customer’s needs, software that is reliable, software 

that is maintainable, software that is better. Yet, we have never promised that 

software engineering is a panacea.  Software and systems technologies remain a challenge for every soft-ware professional and every company that builds computer-based systems. 

Although he wrote these words with a 20th-century outlook, Max Hopper 
[Hop90] accurately describes the current state of affairs:   
Because changes in information technology are becoming so rapid and unforgiv-ing, and the consequences of falling behind are so irreversible, companies will 
Think of it as a technology treadmill. Com-

panies will have to run harder and harder just to stay in place.   
Changes in software engineering technology are indeed ”rapid and unforgiv-ing,” but at the same time real progress is often quite slow. By the time a de-

cision is made to adopt a new process, method, or tool; conduct the training 
necessary to understand its application; and introduce the technology into the 
software development culture, something newer (and even better) has come 
along, and the process begins anew. 
 KEY CONCEPTS     artiﬁ
 cial 
intelligence. . . . . . 863   

   communication  . . . 862   

   ethics. . . . . . . . . . 865   

   future. . . . . . . . . . 864   

   information 

spectrum  . . . . . . . 864   

   knowledge  . . . . . . 863   

   people  . . . . . . . . . 861   

   responsibility  . . . . 865   

   software 

revisited. . . . . . . . 861    
 QUICK LOOK   
What is it?   As we come to the end of a relatively long journey 

through software engineering, it’s 

time to put things into perspective and make a few concluding comments.   
 
Who does it?   Authors like us. When you 
come to the end of a long and challenging 

book, it’s nice to wrap things up in a mean-

ingful way. 
  
 
Why is it important? 
  It’s always worthwhile 
to remember where we’ve been and to con-
sider where we’re going.   
 
What are the steps?   We’ll consider where 
we’ve been and address some of the core 
issues and some directions for the future.   
 
What is the work product? 
  A discussion that will help you understand the big picture.   
 
How do I ensure that I’ve done it right?   That’s difﬁ
 cult to accomplish in real time. It’s 
only after a number of years that any of us 
can tell whether the software engineering con-
cepts, principles, methods, and techniques 
discussed in this book have helped you to be-
come a better software engineer. 
 pre22126_ch39_860-868.indd   860pre22126_ch39_860-868.indd   86013/12/13   6:18 PM13/12/13   6:18 PM