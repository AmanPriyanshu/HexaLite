Modeling the vocabulary of a system and modeling the distribution of responsibilities in a system are discussed in Chapter 4. When you model the vocabulary of a complex system, you may encounter dozens, if not hundreds or thousands, of classes, interfaces, components, nodes, and use cases. Establishing a crisp boundary around each of these abstractions is hard. Establishing the myriad of relationships among these abstractions is even harder: this requires you to form a balanced distribution of responsibilities in the system as a whole, with individual abstractions that are tightly cohesive and with relationships that are expressive, yet loosely coupled. When you model these webs of relationships, Use cases are discussed in Chapter 16. · Don't begin in isolation. Apply use cases and scenarios to drive your discovery of the relationships among a set of abstractions. · In general, start by modeling the structural relationships that are present. These reflect the static view of the system and are therefore fairly tangible. · Next, identify opportunities for generalization/specialization relationships; use multiple inheritance sparingly. · Only after completing the preceding steps should you look for dependencies; they generally represent more-subtle forms of semantic connection. · For each kind of relationship, start with its basic form and apply advanced features only as absolutely necessary to express your intent. · Remember that it is both undesirable and unnecessary to model all relationships among a set of abstractions in a single diagram or view. Rather, build up your system's relationships by considering different views on the system. Highlight interesting sets of relationships in individual diagrams. The five views of an architecture are discussed in Chapter 2; theRational Unified Process is summarized in Appendix C. The key to successfully modeling complex webs of relationships is to do so in an incremental fashion. Build up relationships as you add to the structure of a system's architecture. Simplify those relationships as you discover opportunities for common mechanisms. At every release in your development process, assess the relationships among the key abstractions in your system. Note In practice#and especially if you are following an incremental and iterative development process#the relationships in your models will derive from explicit decisions by the modeler as well as from the reverse engineering of your implementation. Hints and Tips When you model advanced relationships in the UML, remember that there is a wide range of building blocks at your disposal, from simple associations to more-detailed properties of navigation, qualification, aggregation, and so on. You must choose the relationship and the details of that relationship to best fit your abstraction. A well-structured relationship 