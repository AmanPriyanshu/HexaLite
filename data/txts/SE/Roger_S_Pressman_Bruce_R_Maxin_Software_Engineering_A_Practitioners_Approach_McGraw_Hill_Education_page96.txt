66  
 In 2001, Kent Beck and 16 other noted software developers, writers, and con-sultants [Bec01] (referred to as the “  
Agile Alliance  
”) signed the  “Manifesto for Agile Software Development.” It stated:  
We are uncovering better ways of developing software by doing it and helping 
others do it. Through this work we have come to value:   
Individuals and interactions 
 over processes and tools   
Working software
 
 over comprehensive documentation   
Customer collaboration 
 over contract negotiation   
Responding to change 
 over following a plan  That is, while there is value in the items on the right, we value the items on the left more.   
 
KEY CONCEPTS     acceptance tests  . . . 75  
    agile alliance. . . . . . 70  

    agile process. . . . . . 69  

    Agile Uniﬁ
 ed 
Process  . . . . . . . . . 82  

    agility  . . . . . . . . . . 68  

    agility principles  . . . 70  

    cost of change. . . . . 68  

    Dynamic Systems 

Development Method 
(DSDM}  . . . . . . . . . 79  
 AGILE DEVELOPMENT 5   
 
 
 
CHAPTER 
 
 
 
 
 
 
 
 
QUICK LOOK   
What is it?   
Agile software engi-neering combines a philosophy and 
a set of development guidelines. 
The philosophy encourages cus-tomer satisfaction and early incremental deliv-
ery of software; small, highly motivated project 

teams; informal methods; minimal software 

engineering work products; and overall de-
velopment simplicity. The development guide-

lines stress delivery over analysis and design 

(although these activities are not discouraged), 
and active and continuous communication 
 between developers and customers.   
 
Who does it?   
Software engineers and other project stakeholders (managers, customers, 
end users) work together on an agile team—a 
team that is self-organizing and in control of its 
own destiny. An agile team fosters communi-

cation and collaboration among all who serve 

on it.   
 
Why is it important?
   
The modern business 
environment that spawns computer-based 

systems and software products is fast-paced 
and ever-changing. Agile software engineer-

ing represents a reasonable alternative to 
conventional software engineering for cer-
tain classes of software and certain types of 

 software projects. It has been demonstrated to deliver successful systems quickly. 
  
 
What are the steps?   
Agile development might best be termed “software engineering lite.” The 

basic framework activities— communication, planning, modeling, construction, and 
 deployment—remain. But they morph into a minimal task set that pushes the project team 
toward construction and delivery (some would 

argue that this is done at the expense of prob-
lem analysis and solution design).   
 
What is the work product?
   
Both the cus-tomer and the software engineer have the 
same view—the only really important work 

product is an operational “software increment” 
that is delivered to the customer on the appro-
priate commitment date.   
 
How do I ensure that I’ve done it right?   
If the agile team agrees that the process works, 
and the team produces deliverable software 
 increments that satisfy the customer, you’ve 
done it right. pre22126_ch05_066-086.indd   66pre22126_ch05_066-086.indd   6613/12/13   6:10 PM13/12/13   6:10 PM