understand the intent of your model. As the previous sections have described, however, you can also specify the visibility, scope, and multiplicity of each attribute. There's still more. You can also specify the type, initial value, and changeability of each attribute. You can also use stereotypes to designate sets of related attributes, such as housekeeping attributes, as discussed in Chapter 6. In its full form, the syntax of an attribute in the UML is                   [visibility] name [multiplicity] [: type]              [= initial-value] [{property-string}] For example, the following are all legal attribute declarations: $ origin  Name only $ + origin  Visibility and name $ origin : Point  Name and type $ head : *Item  Name and complex type $ name [0..1] : String  Name, multiplicity, and type $ origin : Point = (0,0)  Name, type, and initial value $ id : Integer {frozen}  Name and property There are three defined properties that you can use with attributes. 1. changeable  There are no restrictions on modifying the attribute's value. 2. addOnly  For attributes with a multiplicity greater than one, additional values may be added, but once created, a value may not be removed or altered. 3. frozen  The attribute's value may not be changed after the object is initialized. Unless otherwise specified, attributes are always changeable. You'll mainly want to use frozen when modeling constant or write-once attributes. Note The frozen property maps to const in C++.  Operations Signals are discussed in Chapter 20. At the most abstract level, when you model a class's behavioral features (that is, its operations and its signals), you will simply write each operation's name. That's usually enough information for the average reader to understand the intent of your model. As the previous sections have described, however, you can also specify the visibility and scope of each operation. There's still more: You can also specify the parameters, return type, concurrency semantics, and other properties of each operation. Collectively, the name of an operation plus its parameters (including its return type, if any) is called the operation's signature. Note 