 Every element in the UML's notation starts with a basic symbol, to which can be added a variety of adornments specific to that symbol. Common Divisions   In modeling object-oriented systems, the world often gets divided in at least a couple of ways. Objects are discussed in Chapter 13. First, there is the division of class and object. A class is an abstraction; an object is one concrete manifestation of that abstraction. In the UML, you can model classes as well as objects, as shown in Figure 2-17. Figure 2-17 Classes And Objects  In this figure, there is one class, named Customer, together with three objects: Jan (which is marked explicitly as being a Customer object), :Customer (an anonymous Customer object), and Elyse (which in its specification is marked as being a kind of Customer object, although it's not shown explicitly here). Almost every building block in the UML has this same kind of class/object dichotomy. For example, you can have use cases and use case instances, components and component instances, nodes and node instances, and so on. Graphically, the UML distinguishes an object by using the same symbol as its class and then simply underlying the object's name. Interfaces are discussed in Chapter 11. 