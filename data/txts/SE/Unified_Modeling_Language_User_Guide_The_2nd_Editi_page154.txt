There is one important distinction between classes and packages: Classes are abstractions of things found in your problem or solution; packages are mechanisms you use to organize the things in your model. Packages have no identity (meaning that you can't have instances of packages, so they are invisible in the running system); classes do have identity (classes have instances, which are elements of a running system). The five views of an architecture are discussed in Chapter 2. Most of the time, you'll use packages to group the same basic kind of elements. For example, you might separate all the classes and their corresponding relationships from your system's design view into a series of packages, using the UML's import dependencies to control access among these packages. You might organize all the components in your system's implementation view in a similar fashion. You can also use packages to group different kinds of elements. For example, for a system being developed by a geographically distributed team, you might use packages as your unit of configuration management, putting in them all the classes and diagrams that each team can check in and check out separately. In fact, it's common to use packages to group modeling elements and their associated diagrams. To model groups of elements, · Scan the modeling elements in a particular architectural view and look for clumps defined by elements that are conceptually or semantically close to one another. · Surround each of these clumps in a package. · For each package, distinguish which elements should be accessible outside the package. Mark them public, and all others protected or private. When in doubt, hide the element. · Explicitly connect packages that build on others via import dependencies. · In the case of families of packages, connect specialized packages to their more general part via generalizations. For example, Figure 12-6 shows a set of packages that organize the classes in an information system's design view into a classic three-tier architecture. The elements in the package User Services provide the visual interface for presenting information and gathering data. The elements in the package Data Services maintain, access, and update data. The elements in the package Business Services bridge the elements in the other two packages and encompass all the classes and other elements that manage requests from the user to execute a business task, including business rules that dictate the policies for manipulating data. Figure 12-6 Modeling Groups of Elements 