 Especially when you reverse engineer from source code, and sometimes when you reverse engineer from binary libraries and executables, you'll do so in the context of a configuration management system. This means that you'll often be working with specific versions of files or libraries, with all versions of a configuration compatible with one another. In these cases, you'll want to include a tagged value that represents the component version, which you can derive from your configuration management system. In this manner, you can use the UML to visualize the history of a component across various releases. Hints and Tips When you create component diagrams in the UML, remember that every component diagram is just a graphical presentation of the static implementation view of a system. This means that no single component diagram need capture everything about a system's implementation view. Collectively, all the component diagrams of a system represent the system's complete static implementation view; individually, each represents just one aspect. A well-structured component diagram · Is focused on communicating one aspect of a system's static implementation view. · Contains only those elements that are essential to understanding that aspect. · Provides detail consistent with its level of abstraction, with only those adornments that are essential to understanding exposed. · Is not so minimalist that it misinforms the reader about important semantics. When you draw a component diagram, · Give it a name that communicates its purpose. 