interprocess communication: message passing and remote procedure calls. In the UML, you still model these as asynchronous or synchronous events, respectively. But because these are no longer simple in-process calls, you need to adorn your designs with further information. To model interprocess communication, Stereotypes are discussed in Chapter 6 ; notes are discussed in Chapter 6 ; collaborations are discussed in Chapter 27 ; nodes are discussed in Chapter 26. 路 Model the multiple flows of control. 路 Consider which of these active objects represent processes and which represent threads. Distinguish them using the appropriate stereotype. 路 Model messaging using asynchronous communication; model remote procedure calls using synchronous communication. 路 Informally specify the underlying mechanism for communication by using notes, or more formally by using collaborations. Figure 22-5 shows a distributed reservation system with processes spread across four nodes. Each object is marked using the process stereotype. Each object is also marked with a location tagged value, specifying its physical location. Communication among the ReservationAgent, TicketingManager, and HotelAgent is asynchronous. Modeled with a note, communication is described as building on a Java Beans messaging service. Communication between the TripPlanner and the ReservationSystem is synchronous. The semantics of their interaction is found in the collaboration named CORBA ORB. The TripPlanner acts as a client, and the ReservationAgent acts as a server. By zooming into the collaboration, you'll find the details of how this server and client collaborate. Figure 22-5 Modeling Interprocess Communication  Hints and Tips A well-structured active class and active object 