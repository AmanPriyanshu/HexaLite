CHAPTER 7  
PRINCIPLES THAT GUIDE PRACTICE
 129 
 
 
7.5.  Do some research on “facilitation” for the communication activity (use the references provided or others) and prepare a set of guidelines that focus solely on facilitation.    
 
7.6.  How does agile communication differ from traditional software engineering communi-cation? How is it similar?    
 
7.7.  Why is it necessary to “move on”?    
 
7.8.  Do some research on “negotiation” for the communication activity and prepare a set of guidelines that focus solely on negotiation.    
 
7.9.  Describe what  granularity 
 means in the context of a project schedule.    
 
7.10.  Why are models important in software engineering work? Are they always necessary? Are there qualiﬁ ers to your answer about necessity? 
   
 
7.11.  What three “domains” are considered during requirements modeling?    
 
7.12.  Try to add one additional principle to those stated for coding in Section 7.3.4. 
   
 
7.13.  What is a successful test?    
 
7.14.  Do you agree or disagree with the following statement: “Since we deliver multi-ple increments to the customer, why should we be concerned about quality in the early 

 increments—we can ﬁ x problems in later iterations.” Explain your answer. 
   
 
7.15.  Why is feedback important to the software team?   
 
 
 
  F
URTHER
 READINGS AND INFORMATION
 SOURCES  
 
Customer communication is a critically important activity in software engineering, yet few practitioners spend any time reading about it. Withall ( 
Software Requirements Patterns,
 
  Microsoft Press, 2007) presents a variety of useful patterns that address communications problems. van Lamsweerde ( Requirement Engineering: From System Goals to UML Models 
to Software Speciﬁ
 cations,
 
 Wiley, 2009) and Sutliff ( 
User-Centered Requirements  
Engineering, 
 Springer, 2002) focuses heavily on communications-related challenges. 
  
 
Books by Karten ( Changing How You Manage and Communicate Change,
 
 IT Governace 
Publishing, 2009), Weigers ( 
Software Requirements,
 
 2nd ed., Microsoft Press, 2003), Pardee 
( To Satisfy and Delight Your Customer,
 
 Dorset House, 1996), and Karten [Kar94] provide 
much insight into methods for effective customer interaction. Although their book does not 
focus on software, Hooks and Farry ( Customer-Centered Products
 
, American Management Association, 2000) present useful generic guidelines for customer communication. Young 

( Project Requirements: A Guide to Best Practices,
 
 Management Concepts, 2006 and  Effective Requirements Practices,
 
 Addison-Wesley, 2001) emphasizes a “joint team” of customers and 
developers who develop requirements collaboratively. Hull, Jackson, and Dick ( 
Require-
ments Engineering, 
 Springer, 3rd ed., 2010) and Somerville and Kotonya ( 
Requirements 
Engineering: Processes and Techniques,
 
 Wiley, 1998) discuss “elicitation” concepts and tech-
niques and other requirements engineering principles.   
 
Communication and planning concepts and principles are considered in many project management books. Useful project management offerings include books by Juli ( Leadership Principles for Project Success,
 
 CRC Press, 2012), West and his colleagues ( 
Project Manage-
ment for IT Related Projects,
 
 British Informatics Society, 2012), Wysocki ( 
Effective Project 
Management: Agile, Adaptive, Extreme,
 
 5th ed., Wiley, 2009), Hughes ( 
Software Project Man-
agement, 
 5th ed., McGraw-Hill, 2009), Bechtold ( 
Essentials of Software Project Management,
 
 2nd ed., Management Concepts, 2007), Leach ( Lean Project Management: Eight Principles for 
Success, 
 BookSurge Publishing, 2006), and Stellman and Greene ( 
Applied Software Project 
Management, 
 O'Reilly Media, 2005).   
 
Davis [Dav95b] has compiled an excellent collection of software engineering principles. In addition, virtually every book on software engineering contains a useful discussion of pre22126_ch07_103-130.indd   129pre22126_ch07_103-130.indd   12913/12/13   6:11 PM13/12/13   6:11 PM