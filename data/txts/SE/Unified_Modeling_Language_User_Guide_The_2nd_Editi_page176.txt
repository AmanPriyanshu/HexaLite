objects (such as local variables used by the operation to calculate intermediate points in a path to the new position). Classes are discussed in Chapters 4and 9. Finally, you will find interactions in the context of a class. You can use interactions to visualize, specify, construct, and document the semantics of a class. For example, to understand the meaning of a class RayTraceAgent, you might create interactions that show how the attributes of that class collaborate with one another (and with objects global to instances of the class and with parameters defined in the class's operations). Components are discussed in Chapter 25; nodes are discussed in Chapter 26; use cases are discussed in Chapter 16; modeling the realization of a use case is discussed in Chapter 27; classifiers are discussed in Chapter 9. Note An interaction may also be found in the representation of a component, node, or use case, each of which, in the UML, is really a kind of classifier. In the context of a use case, an interaction represents a scenario that, in turn, represents one thread through the action of the use case.  Objects and Roles The objects that participate in an interaction are either concrete things or prototypical things. As a concrete thing, an object represents something in the real world. For example, p, an instance of the class Person, might denote a particular human. Alternately, as a prototypical thing, p might represent any instance of Person. Note This is what distinguishes a collaboration. In a collaboration, the objects you find are prototypical things that play particular roles, not specific objects in the real world.  Abstract classes are discussed in Chapter 4; interfaces are discussed in Chapter 11. In the context of an interaction, you may find instances of classes, components, nodes, and use cases. Although abstract classes and interfaces, by definition, may not have any direct instances, you may find instances of these things in an interaction. Such instances do not represent direct instances of the abstract class or of the interface, but may represent, respectively, indirect (or prototypical) instances of any concrete children of the abstract class of some concrete class that realizes that interface. Instances are discussed in Chapter 13; object diagrams are discussed in Chapter 14. You can think of an object diagram as a representation of the static aspect of an interaction, setting the stage for the interaction by specifying all the objects that work together. An interaction goes further by introducing a dynamic sequence of messages that may pass along the links that connect these objects. 