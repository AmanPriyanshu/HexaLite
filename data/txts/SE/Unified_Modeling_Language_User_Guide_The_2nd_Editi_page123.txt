import  flat namespace of the source, as if they had been declared in the source  You'll use access and import when you want to model the relationships among packages. Between two peer packages, the elements in one cannot reference the elements in the other unless there's an explicit access or import dependency. For example, suppose a target package T contains the class C. If you specify an access dependency from Sto T, then the elements of S can reference C, using the fully qualified name T::C. If you specify an import dependency from S to T, then the elements of S can reference C using just its simple name. Use cases are discussed in Chapter 16. Two stereotypes apply to dependency relationships among use cases: 1. extend  Specifies that the target use case extends the behavior of the source 2. include  Specifies that the source use case explicitly incorporates the behavior of another use case at a location specified by the source You'll use extend and include (and simple generalization) when you want to decompose use cases into reusable parts. Interactions are discussed in Chapter 15. You'll encounter three stereotypes when modeling interactions among objects. 1. become  Specifies that the target is the same object as the source but at a later point in time and with possibly different values, state, or roles 2. call  Specifies that the source operation invokes the target operation 3. copy  Specifies that the target object is an exact, but independent, copy of the source Time andspace are discussed in Chapter 23. You'll use become and copy when you want to show the role, state, or attribute value of one object at different points in time or space. You'll use call when you want to model the calling dependencies among operations. One stereotype you'll encounter in the context of state machines is ?send  Specifies that the source operation sends the target event State machines are discussed in Chapter 21. You'll use send when you want to model an operation (such as found in the action associated with a state transition) dispatching a given event to a target object (which in turn might have an associated state machine). The send dependency in effect lets you tie independent state machines together. Systems andmodels are discussed in Chapter 31. Finally, one stereotype that you'll encounter in the context of organizing the elements of your system into subsystems and models is ?trace  Specifies that the target is an historical ancestor of the source The five views of an architecture are discussed in Chapter 2. You'll use trace when you want to model the relationships among elements in different models. For example, in the context of a system's architecture, a use case in a use case model 