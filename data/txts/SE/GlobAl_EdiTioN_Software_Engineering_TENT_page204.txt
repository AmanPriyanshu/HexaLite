˜˜
˚˛˝˙ˆˇ˘˜˜˜˜˜˜˜2. The WeatherData object class is responsible for processing the report weather 
command. It sends the summarized data from the weather station instruments to the weather information system.3.
 The Ground thermometer, Anemometer, and Barometer object classes are directly 
related to instruments in the system. They reflect tangible hardware entities in the 

system and the operations are concerned with controlling that hardware. These 

objects operate autonomously to collect data at the specified frequency and store the 

collected data locally. This data is delivered to the WeatherData object on request.You use knowledge of the application domain to identify other objects, attributes. and services:1. Weather stations are often located in remote places and include various instru-ments that sometimes go wrong. Instrument failures should be reported auto
-
matically. This implies that you need attributes and operations to check the 

correct functioning of the instruments.2. There are many remote weather stations, so each weather station should have its 
own identifier so that it can be uniquely identified in communications.3. As weather stations are installed at different times, the types of instrument may 
be different. Therefore, each instrument should also be uniquely identified, and 

a database of instrument information should be maintained.At this stage in the design process, you should focus on the objects themselves, with-out thinking about how these objects might be implemented. Once you have identified 

the objects, you then refine the object design. You look for common features and then 

design the inheritance hierarchy for the system. For example, you may identify an 
Instrument superclass, which defines the common features of all instruments, such as an 
identifier, and get and test operations. You may also add new attributes and operations 

to the superclass, such as an attribute that records how often data should be collected.ˇˇDesign or system models, as I discussed in Chapter 5, show the objects or object classes 

in a system. They also show the associations and relationships between these entities. 

These models are the bridge between the system requirements and the implementation 

of a system. They have to be abstract so that unnecessary detail doesn™t hide the rela-tionships between them and the system requirements. However, they also have to 

include enough detail for programmers to make implementation decisions.The level of detail that you need in a design model depends on the design process used. Where there are close links between requirements engineers, designers and 

programmers, then abstract models may be all that are required. Specific design 

decisions may be made as the system is implemented, with problems resolved 

through informal discussions. Similarly, if agile development is used, outline design 
models on a whiteboard may be all that is required.