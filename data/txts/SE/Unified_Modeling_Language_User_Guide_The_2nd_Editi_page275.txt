but safe functionality will be preserved. Similarly, and especially in Web-based systems that must deal with unpredictable peaks in demand, you'll often want to build mechanisms to automatically balance the processing load, perhaps by migrating components and objects to underused nodes. Deciding how to migrate the objects in a system is an even more wicked problem than simple static distribution because migration raises difficult problems of synchronization and preservation of identity. To model the migration of objects, Mechanisms are discussed in Chapter 28. Thebecomeand copystereotypes are discussed in Chapter 13. 路 Select an underlying mechanism for physically transporting objects across nodes. 路 Render the allocation of an object to a node by explicitly indicating its location as a tagged value. 路 Using the become and copy stereotyped messages, render the allocation of an object to a new node. 路 Consider the issues of synchronization (keeping the state of cloned objects consistent) and identity (preserving the name of the object as it moves). Collaboration diagrams are discussed in Chapter 18. Figure 23-6 provides a collaboration diagram that models the migration of a Web agent that moves from node to node, collecting information and bidding on resources in order to automatically deliver a lowest-cost travel ticket. Specifically, this diagram shows an instance (named t) of the class TravelAgent migrating from one server to another. Along the way, the object interacts with anonymous Auctioneer instances at each node, eventually delivering a bid for the Itinerary object, located on the client server. Figure 23-6 Modeling Objects that Migrate  Hints and Tips A well-structured model with time and space properties 