 The requirement modeled by the use case Manage network outage is a bit different from all the others because it represents a secondary behavior of the system necessary for its reliable and continuous operation. Subsystems are discussed in Chapter 31. This same technique applies to modeling the requirements of a subsystem. Forward and Reverse Engineering Diagrams are discussed in Chapter 7; use cases are discussed in Chapter 16. Most of the UML's other diagrams, including class, component, and statechart diagrams, are clear candidates for forward and reverse engineering because each has an analog in the executable system. Use case diagrams are a bit different in that they reflect rather than specify the implementation of a system, subsystem, or class. Use cases describe how an element behaves, not how that behavior is implemented, so it cannot be directly forward or reverse engineered. Forward engineering is the process of transforming a model into code through a mapping to an implementation language. A use case diagram can be forward engineered to form tests for the element to which it applies. Each use case in a use case diagram specifies a flow of events (and variants of those flows), and these flows specify how the element is expected to behave#that's something worthy of testing. A well-structured use case will even specify pre- and postconditions that can be used to define a test's initial state and its success criteria. For each use case in a use case diagram, you can create a test case that you can run every time you release a new version of that element, thereby confirming that it works as required before other elements rely on it. To forward engineer a use case diagram, 