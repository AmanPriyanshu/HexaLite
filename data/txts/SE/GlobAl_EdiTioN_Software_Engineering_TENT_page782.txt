˜˚ˆ˜˜˚˛˝˙ˆˇ˘
˜data-driven modeling, 154Œ55data-feed systems, 602Œ03
data-mining system, 508
deadlines (real-time systems), 627
debugging, 58, 216, 232, 244
decentralized systems, 510Œ11, 517
Decorator pattern, 212
defect testing, 58, 227Œ28, 232debugging v., 58, 232
performance, 248
release testing, 248deltas (storage management), 740
denial-of-service attacks, 289Œ90, 389, 423
Department of Defense Architecture Framework (DODAF), 601dependability (software dependability), 26, 285Œ305activities for, 298
assurance, 353Œ56, 402Œ04
costs of, 290Œ91
critical systems, 287, 290, 297, 302
design considerations, 287, 295
formal methods and, 299Œ302, 303
functionality v., 286
properties, 288Œ91
redundancy and diversity, 295Œ97, 303
reliability and, 288Œ90, 297, 303
safety and, 288, 299
security and, 22, 26, 288, 376Œ79
sociotechnical systems, 291Œ95, 303
specification and, 300Œ02
system, 268, 286Œ91, 303dependable programming guidelines, 325Œ31
deploymentcomponent model, 471, 472Œ73
design for, 399Œ400
service implementation and, 540Œ41
system development and, 570
systems of systems (SoS), 595, 597Œ99
UML diagrams, 149, 218deployment-time configuration, 451Œ52
derivation history, 750
design (software design), 44, 56Œ58, 69, 78, 196Œ225. See also architectural design; 
system designactivity model (diagram), 56
configuration management, 212, 215Œ16, 222
for deployment, 399Œ400
engineering programming and, 23, 44, 58
guidelines, 396Œ401, 405implementation and, 47, 56Œ58, 69, 196Œ225
interface, 57, 208Œ09, 222
life-cycle phase, 47
models, 123Œ208, 222
object-oriented, 198Œ209, 222
open-source development, 219Œ21, 222
patterns, 209Œ12
for recovery, 400Œ01
for resilience, 424Œ32
reuse and, 57, 212, 213Œ15
service interfaces, 533, 536Œ40
test-case, 234Œ37
UML documentation, 197, 198Œ209
user interface, 62design-time configuration, 451Œ52
‚desk™ testing, 428
developmentagile techniques, 77Œ84, 88, 732
customization stages, 732Œ33
configuration management (CM) phases, 732Œ33engineering design and programming, 23, 44
evolution and, 23, 60Œ61, 256Œ57, 280
implementation stage, 56Œ58
maintenance costs, 274Œ76, 279
maintenance v., 60Œ61
pair programming, 83Œ84
plan-driven process, 59Œ60, 570
professional software, 19Œ28
refactoring, 51, 62, 80Œ81
regulators for safety, 353
reuse and, 52Œ54
reuse for (CBSE process), 473, 474Œ77
reuse with (CBSE process), 473, 477Œ80
safety cases, 362Œ63
safety-critical systems, 352Œ53
services and, 541Œ47, 548
sociotechnical systems, 291Œ295, 303
software dependability and, 290
spiral model for, 256Œ57
system processes, 554, 570Œ74
testing, 58Œ60, 81Œ83, 230Œ32development team, 85, 90, 92Œ93
development testing, 231Œ42, 252
development view, 174, 192
digital art, 566
digital learning environment (iLearn), 38Œ39application programming interface (API), 39
architecture (diagram), 38Œ39