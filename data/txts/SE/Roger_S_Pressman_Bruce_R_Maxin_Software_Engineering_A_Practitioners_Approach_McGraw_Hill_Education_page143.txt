CHAPTER 7  
PRINCIPLES THAT GUIDE PRACTICE
 113useful guidance for the team—no more, no less. Regardless of the rigor with which planning is conducted, the following principles always apply:   
 
 
 
 
 
 
Principle 1. 
  Understand the scope of the project.Understand the scope of the project.
 
 It’s impossible to use 
a road map if you don’t know where you’re going. Scope provides the 
 software team with a destination.    
 
 
 
 
 
Principle 2. 
  Involve stakeholders in the planning activity.Involve stakeholders in the planning activity.
 
 Stakeholders deﬁ ne priorities and establish project constraints. To accommodate these 
realities, software engineers must often negotiate order of delivery, time 

lines, and other project-related issues.    
 
 
 
 
 
Principle 3. 
  Recognize that planning is iterative.Recognize that planning is iterative. 
 A project plan is never engraved in stone. As work begins, it is very likely that things will change. 
As a consequence, the plan must be adjusted to accommodate these 
changes. In addition, iterative, incremental process models dictate re-
planning after the delivery of each software increment based on feedback 
received from users.    
 
 
 
 
 
Principle 4. 
  Estimate based on what you know.Estimate based on what you know.
 
 The intent of estimation is to provide an indication of effort, cost, and task duration, based on the 
team’s current understanding of the work to be done. If information is 

vague or unreliable, estimates will be equally unreliable.  
   
 
 
 
 
 
Principle 5. 
  Consider risk as you deﬁ ne the plan.Consider risk as you deﬁ ne the plan.
 
 If you have identiﬁ ed 
risks that have high impact and high probability, contingency planning is 

necessary. In addition, the project plan (including the schedule) should be 

adjusted to accommodate the likelihood that one or more of these risks 
will occur. Take into account the likely exposure due to losses or compro-

mises of project assets.    
 
 
 
 
 
Principle 6. 
  Be realistic.Be realistic.
 
 People don’t work 100 percent of every day. Noise 
always enters into any human communication. Omissions and ambiguity 
are facts of life. Change will occur. Even the best software engineers make 

mistakes. These and other realities should be considered as a project plan 
is established.  
 
 
 
 
   
 
 
 
 
 
 
 
Principle 7. 
  Adjust granularity as you deﬁ ne the plan. Adjust granularity as you deﬁ ne the plan. Granularity
 
 refers to the level of detail that is introduced as a project plan is developed. 
A “high-granularity” plan provides signiﬁ cant work task detail that is 
planned over relatively short time increments (so that tracking and con-
trol occur frequently). A “low-granularity” plan provides broader work 
tasks that are planned over longer time periods. In general, granularity 
moves from high to low as the project time line moves away from the cur-

rent date. Over the next few weeks or months, the project can be planned 
in signiﬁ cant detail. Activities that won’t occur for many months do not 
require high granularity (too much can change).   
 uote:      “Success is more 
a function of 
consistent common 
sense than it is of 
genius.”  An Wang 
   The term  
granularity  refers to the detail with 
which some element of 
planning is represented 
or conducted. pre22126_ch07_103-130.indd   113pre22126_ch07_103-130.indd   11313/12/13   6:11 PM13/12/13   6:11 PM