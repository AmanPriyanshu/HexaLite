Object diagrams may also contain packages or subsystems, both of which are used to group elements of your model into larger chunks. Sometimes, you'll want to place classes in your object diagrams, as well, especially when you want to visualize the classes behind each instance. Class diagrams are discussed in Chapter 8; interaction diagrams are discussed in Chapter 18. Note An object diagram is essentially an instance of a class diagram or the static part of an interaction diagram. In either case, an object diagram contains primarily objects and links, and focuses on concrete or prototypical instances. Both component diagrams and deployment diagrams may contain instances, and if they contain only instances (and no messages), they too are considered to be special kinds of object diagrams.  Common Uses Design views are discussed in Chapter 2. You use object diagrams to model the static design view or static process view of a system just as you do with class diagrams, but from the perspective of real or prototypical instances. This view primarily supports the functional requirements of a system#that is, the services the system should provide to its end users. Object diagrams let you model static data structures. When you model the static design view or static process view of a system, you typically use object diagrams in one way: Â· To model object structures Interaction diagrams are discussed in Chapter 18. Modeling object structures involves taking a snapshot of the objects in a system at a given moment in time. An object diagram represents one static frame in the dynamic storyboard represented by an interaction diagram. You use object diagrams to visualize, specify, construct, and document the existence of certain instances in your system, together with their relationships to one another. Common Modeling Techniques Modeling Object Structures When you construct a class diagram, a component diagram, or a deployment diagram, what you are really doing is capturing a set of abstractions that are interesting to you as a group and, in that context, exposing their semantics and their relationships to other abstractions in the group. These diagrams show only potentiality. If class A has a one-to-many association to class B, then for one instance of A there might be five instances of B; for another instance of A there might be only one instance of B. Furthermore, at a given moment in time, that instance of A, along with the related instances of B, will each have certain values for their attributes and state machines. If you freeze a running system or just imagine a moment of time in a modeled system, you'll find a set of objects, each in a specific state, and each in a particular relationship to other objects. You can use object diagrams to visualize, specify, construct, and document the structure of these objects. Object diagrams are especially useful for modeling complex data structures. 