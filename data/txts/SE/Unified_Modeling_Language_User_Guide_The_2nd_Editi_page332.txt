 There are many more components involved in this system. However, this diagram only focuses on those deployment components that are directly involved in moving the robot. Note that in this component-based architecture, you could replace a specific version of driver.dll with another that realized the same (and perhaps additional) interfaces, and path.dll would still function properly. If you want to be explicit about the operations that driver.dll realizes, you could always render its interface using class notation, stereotyped as  interface!. Modeling a Physical Database Modeling a logical database schema is discussed in Chapter 8. A logical database schema captures the vocabulary of a system's persistent data, along with the semantics of their relationships. Physically, these things are stored in a database for later retrieval, either a relational database, an object-oriented one, or a hybrid object/relational database. The UML is well suited to modeling physical databases, as well as logical database schemas. Physical database design is beyond the scope of this book; the focus here is simply to show you how you can model databases and tables using the UML. Mapping a logical database schema to an object-oriented database is straightforward because even complex inheritance lattices can be made persistent directly. Mapping a logical database 