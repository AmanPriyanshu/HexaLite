Organizing Components Packages are discussed in Chapter 12. You can organize components by grouping them in packages in the same manner in which you organize classes. Relationships are discussed in Chapters 5 and 10. You can also organize components by specifying dependency, generalization, association (including aggregation), and realization relationships among them. Standard Elements The UML's extensibility mechanisms are discussed in Chapter 6. All the UML's extensibility mechanisms apply to components. Most often, you'll use tagged values to extend component properties (such as specifying the version of a development component) and stereotypes to specify new kinds of components (such as operating system-specific components). The UML's standard elements are summarized in Appendix B. The UML defines five standard stereotypes that apply to components: 1. executable  Specifies a component that may be executed on a node 2. library  Specifies a static or dynamic object library 3. table  Specifies a component that represents a database table  4. file  Specifies a component that represents a document containing source code or data 5. document  Specifies a component that represents a document Note The UML does not specify defined icons for any of these stereotypes, although Appendix B offers some notation from common practice. Common Modeling Techniques Modeling Executables and Libraries The most common purpose for which you'll use components is to model the deployment components that make up your implementation. If you are deploying a trivial system whose implementation consists of exactly one executable file, you will not need to do any component modeling. If, on the other hand, the system you are deploying is made up of several executables and associated object libraries, doing component modeling will help you to visualize, specify, construct, and document the decisions you've made about the physical system. Component modeling is even more important if you want to control the versioning and configuration management of these parts as your system evolves. These decisions are also affected by the topology of your target system, as discussed in Chapter 26. 