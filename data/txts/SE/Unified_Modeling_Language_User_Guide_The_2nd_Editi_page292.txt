For most systems, these deployment components are drawn from the decisions you make about how to segment the physical implementation of your system. These decisions will be affected by a number of technical issues (such as your choice of component-based operating system facilities), configuration management issues (such as your decisions about which parts will likely change over time), and reuse issues (that is, deciding which components you can reuse in or from other systems). To model executables and libraries, 路 Identify the partitioning of your physical system. Consider the impact of technical, configuration management, and reuse issues. 路 Model any executables and libraries as components, using the appropriate standard elements. If your implementation introduces new kinds of components, introduce a new appropriate stereotype. 路 If it's important for you to manage the seams in your system, model the significant interfaces that some components use and others realize. 路 As necessary to communicate your intent, model the relationships among these executables, libraries, and interfaces. Most often, you'll want to model the dependencies among these parts in order to visualize the impact of change. The UML's standard elements are summarized in Appendix B. For example, Figure 25-5 shows a set of components drawn from a personal productivity tool that runs on a single personal computer. This figure includes one executable (animator.exe, with a tagged value noting its version number) and four libraries (dlog.dll, wrfrme.dll, render.dll, and raytrce.dll), all of which use the UML's standard elements for executables and libraries, respectively. This diagram also presents the dependencies among these components. Figure 25-5 Modeling Executables and Libraries 