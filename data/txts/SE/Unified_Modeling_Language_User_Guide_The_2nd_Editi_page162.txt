multiple times in the same interaction diagram, but with each occurrence representing a different state. When you operate on an object, you typically change its state; when you query an object, you don't change its state. For example, when you make an airline reservation (represented by the object r : Reservation), you might set the value of one of its attributes (for example, price = 395.75). If you change your reservation, perhaps by adding a new leg to your itinerary, then its state might change (for example, price = 1024.86). As Figure 13-3 shows, you can use the UML to render the value of an object's attributes. For example, myCustomer is shown with the attribute id having the value "432-89-1783." In this case, id's type (SSN) is shown explicitly, although it can be elided (as for active = True), because its type can be found in the declaration of id in myCustomer's associated class. Figure 13-3 Object State  You can associate a state machine with a class, which is especially useful when modeling event-driven systems or when modeling the lifetime of a class. In these cases, you can also show the state of this machine for a given object at a given time. For example, as Figure 13-3 shows, the object c (an instance of the class Phone) is indicated in the state WaitingForAnswer, a named state defined in the state machine for Phone. Note Because an object may be in several states simultaneously, you can also show a list of its current states.  Other Features Processes and threads are discussed in Chapter 22. Processes and threads are an important element of a system's process view, so the UML provides a visual cue to distinguish elements that are active (those that are part of a process or thread and represent a root of a flow of control) from those that are passive. You can declare 