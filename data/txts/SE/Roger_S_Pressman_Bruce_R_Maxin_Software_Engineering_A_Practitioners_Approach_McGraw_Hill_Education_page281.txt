CHAPTER 12  
DESIGN CONCEPTS 251   
 
 
 
FURTHER
 READINGS AND INFORMATION
 SOURCES  
 
Donald Norman has written three books ( Emotional Design: We Love (or Hate) Everyday 
Things, 
 Basic Books, 2005), ( 
The Design of Everyday Things, 
 Doubleday, 1990), and ( 
The Psy-chology of Everyday Things, 
 HarperCollins, 1988) that have become classics in the design 
literature and “must” reading for anyone who designs anything that humans use. Adams 
( Conceptual Blockbusting, 
 4th ed., Addison-Wesley, 2001) has written a book that is essen-
tial reading for designers who want to broaden their way of thinking. Finally, a classic text 

by Polya ( How to Solve It, 
 2nd ed., Princeton University Press, 1988) provides a generic 
 problem-solving process that can help software designers when they are faced with com-plex problems.   
 
Books by Hanington and Martin ( Universal Methods of Design: 100 Ways to Research 
 Complex Problems, Develop Innovative Ideas, and Design Effective Solutions, Rockport,
 
 2012) 
and Hanington and Martin ( Universal Principles of Design: 125 Ways to Enhance  
Usability, 
Inﬂ uence Perception, Increase Appeal, Make Better Design Decisions, and Teach through 
Design, 
 2nd ed., Rockport, 2010) discuss design principles in general.   
 
Following in the same tradition, Winograd et al. ( 
Bringing Design to Software,
 
  Addison- Wesley, 1996) discusses software designs that work, those that don’t, and why. A fascinat-

ing book edited by Wixon and Ramsey ( 
Field Methods Casebook for Software Design,
 
 Wiley, 
1996) suggests ﬁ eld research methods (much like those used by anthropologists) to under-
stand how end users do the work they do and then design software that meets their needs. 
 Holtzblatt ( Rapid Contextual Design: A How-to Guide to Key Techniques for User-Center 
Design, 
 Morgan Kaufman, 2004) and Beyer and Holtzblatt ( 
Contextual Design: A  Customer- 
Centered Approach to Systems Designs,
 
 Academic Press, 1997) offer another view of soft-
ware design that integrates the customer/user into every aspect of the software design 
process. Bain ( Emergent Design,
 
 Addison-Wesley, 2008) couples patterns, refactoring, and 
test-driven development into an effective design approach.   
 
Comprehensive treatment of design in the context of software engineering is presented by Otero ( Software Engineering Design: Theory and Practice,
 
 Auerbach, 2012), Venit and 
Drake ( Prelude to Programming: Concepts and Design,
 
 5th ed., Addison-Wesley, 2010), 
   
 
Fox  (Introduction to Software Engineering Design,
 
 Addison-Wesley, 2006), and Zhu ( 
Software 
Design Methodology,
 
 Butterworth-Heinemann, 2005). McConnell ( 
Code Complete, 
ed., 
Microsoft Press, 2004) presents an excellent discussion of the practical aspects of designing 
high-quality computer software. Robertson ( Simple Program Design,
 
ed., Course Tech-
nology, 2006) presents an introductory discussion of software design that is useful for those 

beginning their study of the subject. Budgen ( Software Design,
 
 2nd ed., Addison-Wesley, 2004) 
introduces a variety of popular design methods, comparing and contrasting each. Fowler 
and his colleagues ( Refactoring: Improving the Design of Existing Code,
 
  Addison-Wesley, 
1999) discuss techniques for the incremental optimization of software designs. Rosenberg 
and Stevens ( Use Case Driven Object Modeling with UML, 
 Apress, 2007) discuss the develop-
ment of object-oriented designs using use cases as a foundation.   
 
A worthwhile historical survey of software design is contained in an anthology edited by Freeman and Wasserman ( 
Software Design Techniques,
 
 4th ed., IEEE, 1983). This tutorial 
reprints many of the classic papers that have formed the basis for current trends in soft-
ware design. Measures of design quality, presented from both the technical and manage-

ment perspectives, are considered by Card and Glass ( Measuring Software Design Quality,
 
  Prentice Hall, 1990).   
 
A wide variety of information sources on software design are available on the Internet. An up-to-date list of World Wide Web references that are relevant to software design and 

design engineering can be found at the SEPA website:  
www.mhhe.com/pressman
 .  
 
 
 pre22126_ch12_224-251.indd   251pre22126_ch12_224-251.indd   25113/12/13   6:12 PM13/12/13   6:12 PM