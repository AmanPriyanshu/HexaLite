When you model your system's design view, a set of class diagrams can be used to completely specify the semantics of your abstractions and their relationships. With object diagrams, however, you cannot completely specify the object structure of your system. For an individual class, there may be a multitude of possible instances, and for a set of classes in relationship to one another, there may be many times more possible configurations of these objects. Therefore, when you use object diagrams, you can only meaningfully expose interesting sets of concrete or prototypical objects. This is what it means to model an object structure#an object diagram shows one set of objects in relation to one another at one moment in time. To model an object structure, Mechanisms such as these are often coupled to use cases, as discussed in Chapters 16 and 28. · Identify the mechanism you'd like to model. A mechanism represents some function or behavior of the part of the system you are modeling that results from the interaction of a society of classes, interfaces, and other things. · For each mechanism, identify the classes, interfaces, and other elements that participate in this collaboration; identify the relationships among these things, as well. · Consider one scenario that walks through this mechanism. Freeze that scenario at a moment in time, and render each object that participates in the mechanism. · Expose the state and attribute values of each such object, as necessary, to understand the scenario. · Similarly, expose the links among these objects, representing instances of associations among them. For example, Figure 14-2 shows a set of objects drawn from the implementation of an autonomous robot. This figure focuses on some of the objects involved in the mechanism used by the robot to calculate a model of the world in which it moves. There are many more objects involved in a running system, but this diagram focuses on only those abstractions that are directly involved in creating this world view. Figure 14-2 Modeling Object Structures 