For example, Figure 13-6 shows an object diagram drawn from the execution of a credit card validation system, perhaps as seen by a debugger that's probing the running system. There is one multiobject, containing anonymous instances of the class Transaction. There are also two explicitly named objects#primaryAgent and current#both of which expose their class, although in different ways. The diagram also explicitly shows the current state of the object primaryAgent. Figure 13-6 Modeling Concrete Instances  Note also the use of the dependency stereotyped as instanceOf, indicating the class of primaryAgent. Typically, you'll want to explicitly show these class/object relationships only if you also intend to show relationships with other classes. Modeling Prototypical Instances Interactions are discussed in Chapter 18. Perhaps the most important thing for which you'll use instances is to model the dynamic interactions among objects. When you model such interactions, you are generally not modeling concrete instances that exist in the real world. Instead, you are modeling conceptual objects that are essentially proxies or stand-ins for objects that will eventually act that way in the real world. These are prototypical objects and, therefore, are roles to which concrete instances conform. For example, if you want to model the ways objects in a windowing application react to a mouse event, you'd draw an interaction diagram containing prototypical instances of windows, events, and handlers. Note The semantic difference between concrete objects and prototypical objects is subtle and of relevance only to power modelers. As a typical user, you won't notice the difference at all. To be precise, however, the UML uses the term classifier role to denote a role to which instances conform, a subtle distinction that is context dependent. Concrete objects appear in static places, such as object diagrams, component diagrams, and deployment diagrams. Prototypical objects appear in such places as interaction diagrams and activity diagrams.  To model prototypical instances, Â· Identify those prototypical instances necessary and sufficient to visualize, specify, construct, or document the problem you are modeling. 