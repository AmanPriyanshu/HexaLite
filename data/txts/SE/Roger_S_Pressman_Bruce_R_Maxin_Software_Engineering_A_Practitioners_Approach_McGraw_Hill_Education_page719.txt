CHAPTER 31  
PROJECT MANAGEMENT CONCEPTS 689demonstrate through her own actions that controlled risk taking will not be punished.   
Influence and team building.   An effective project manager must be able to “read” people; she must be able to understand verbal and nonverbal 
signals and react to the needs of the people sending these signals. The 
manager must remain under control in high-stress situations.   
 
 
31.2.3   
The Software Team 
 
There are almost as many human organizational structures for software devel-opment as there are organizations that develop software. For better or worse, 
organizational structure cannot be easily modiﬁ ed. Concern with the practical 
and political consequences of organizational change are not within the software 
project manager’s scope of responsibility. However, the organization of the peo-

ple directly involved in a new software project is within the project manager’s 

purview. 
 
 
 
 
 
  The “best” team structure depends on the management style of your organi-zation, the number of people who will populate the team and their skill levels, 
and the overall problem difﬁ culty. Mantei [Man81] describes seven project fac-
tors that should be considered when planning the structure of software engi-
neering teams: (1) difﬁ culty of the problem to be solved; (2) “size” of the resultant 
program(s) in lines of code or function points; (3) time that the team will stay 
together (team lifetime); (4) degree to which the problem can be modularized; 
(5) quality and reliability of the system to be built; (6) rigidity of the delivery date, 
and (7) degree of sociability (communication) required for the project.  Constantine [Con93] suggests four “organizational paradigms” for software engineering teams:    
 
  
 
 
 
 
 1.
  A  closed paradigm 
 structures a team along a traditional hierarchy of au-thority. Such teams can work well when producing software that is quite 

similar to past efforts, but they will be less likely to be innovative when 
working within the closed paradigm.   
 
 
 2.
  A  random paradigm 
 structures a team loosely and depends on individual initiative of the team members. When innovation or technological break-
through is required, teams following the random paradigm will excel. But 
such teams may struggle when “orderly performance” is required.   
 
 
 3.
  An  open paradigm 
 attempts to structure a team in a manner that achieves some of the controls associated with the closed paradigm but also much of 
the innovation that occurs when using the random paradigm. Work is per-

formed collaboratively, with heavy communication and consensus-based 

decision making the trademarks of open paradigm teams. Open paradigm 
team structures are well suited to the solution of complex problems but 
may not perform as efﬁ ciently as other teams. 
  What factors 
should be considered when 
the structure of a 
software team is 
chosen? ? What 

options do we have when 
deﬁ ning the 
structure of a 
software team? ?  
 
 uote:  “Not every group 
is a team, and 
not every team is 

effective.”  Glenn Parker 
pre22126_ch31_683-702.indd   689pre22126_ch31_683-702.indd   68913/12/13   6:16 PM13/12/13   6:16 PM