· Especially if you have a nontrivial application, try to reconstruct a model of its architecture by using UML packages to represent its major structural elements. · After you become comfortable with the vocabulary of the UML and before you start cutting code on your next project, build a UML model of that part of the system first. Think about the structure or behavior you've specified, and only then, when you are happy with its size, shape, and semantics, use that model as a framework for your implementation. If you are already experienced with another object-oriented method, · Take a look at your current modeling language and construct a mapping from its elements to the elements of the UML. In most cases#especially if you are currently using the Booch, OOSE, or OMT methods# you'll find a one-to-one mapping and that most of the changes are cosmetic. · Consider some wicked modeling problem that you found clumsy or impossible to model with your current modeling language. Look at some of the advanced features of the UML that might address that problem with greater clarity or simplicity. If you are a power user, · Be sure you first develop a conceptual model of the UML. You may miss its harmony of concepts if you dive into the most sophisticated parts of the language without first understanding its basic vocabulary. · Pay particular attention to the UML's features for modeling components, concurrency, distribution, and patterns#issues that often involve complex and subtle semantics. · Look also at the UML's extensibility mechanisms and see how you might tailor the UML to directly speak the vocabulary of your domain. Take care to resist the temptation to go to extremes that yield a UML model that no one but other power users will recognize. Where to Go Next This user guide is part of a larger set of books that, collectively, can help you learn how to apply the UML. In addition to the user guide, there is The Unified Modeling Language Reference Manual, which provides a comprehensive reference to the syntax and semantics of the UML, and The Unified Software Development Process, which presents a recommended development process for use with the UML. To learn more about modeling from the principal authors of the UML, take a look at the following references: · Booch, G. Object-Oriented Analysis and Design with Applications, 2nd ed. Redwood City, California, Addison-Wesley Publishing Company, 1993. · Jacobson, I., Christerson, M., Jonsson, P., and Overgaard, G. Object- Oriented Software Engineering: A Use Case Driven Approach. Wokingham, England, Addison-Wesley Publishing Company, 1992. · Rumbaugh, J., Blaha, M., Premerlani, W., Eddy, F., and Lorensen, W. Object-Oriented Modeling and Design. Englewood Cliffs, New Jersey, Prentice-Hall, 1991. You can read more about statecharts in 