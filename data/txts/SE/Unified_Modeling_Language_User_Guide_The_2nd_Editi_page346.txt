Hints and Tips When you create deployment diagrams in the UML, remember that every deployment diagram is just a graphical presentation of the static deployment view of a system. This means that no single deployment diagram need capture everything about a system's deployment view. Collectively, all the deployment diagrams of a system represent the system's complete static deployment view; individually, each represents just one aspect. A well-structured deployment diagram · Focuses on communicating one aspect of a system's static deployment view. · Contains only those elements that are essential to understanding that aspect. · Provides detail consistent with its level of abstraction; expose only those adornments that are essential to understanding. · Is not so minimalist that it misinforms the reader about important semantics. When you draw a deployment diagram, · Give it a name that communicates its purpose. · Lay out its elements to minimize lines that cross. · Organize its elements spatially so that things that are semantically close are laid out physically close. · Use notes and color as visual cues to draw attention to important features of your diagram. · Use stereotyped elements carefully. Choose a small set of common icons for your project or organization, and use them consistently. Chapter 31. Systems and Models In this chapter · Systems, subsystems, models, and views · Modeling the architecture of a system · Modeling systems of systems · Organizing the artifacts of development The UML is a graphical language for visualizing, specifying, constructing, and documenting the artifacts of a software-intensive system. You use the UML to model systems. A model is a simplification of reality#an abstraction of a system#created in order to better understand the system. A system, possibly decomposed into a collection of subsystems, is a set of elements organized to accomplish a purpose and described by a set of models, possibly from different viewpoints. Things like classes, interfaces, components, and nodes are important parts of a system's model. In the UML, you use models to organize these and all the other abstractions of a system. As you move to more-complex domains, you'll find that a system at one level of abstraction looks like a subsystem at another, higher, level. In the UML, you can model systems and subsystems as a whole so that you can seamlessly move up to problems of scale. 