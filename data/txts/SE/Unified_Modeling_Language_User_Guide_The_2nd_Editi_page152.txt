Import and access dependencies are not transitive. In this example, Client imports Policies and Policies imports GUI, but Client does not by implication import GUI. Therefore, the contents of Client have access to the exports of Policies, but they do not have access to the exports of GUI. To gain access, Client would have to import GUI explicitly. Note If an element is visible within a package, it is visible within all packages nested inside the package. Nested packages can see everything that their containing packages can see.  Generalization Generalization is discussed in Chapters 5 and 10. There are two kinds of relationships you can have between packages: import and access dependencies, used to import into one package elements exported from another, and generalizations, used to specify families of packages. Generalization among packages is very much like generalization among classes. For example, in Figure 12-5, the package GUI is shown to export two classes (Window and Form) and one protected class (EventHandler). Two packages specialize the more general package GUI: WindowsGUI and MacGUI. These specialized packages inherit the public and protected elements of the more general package. But, just as in class inheritance, packages can replace more general elements and add new ones. For example, the package WindowsGUI inherits from GUI, so it includes the classes GUI::Window and GUI::EventHandler. In addition, WindowsGUI overrides one class (Form) and adds a new one (VBForm). Figure 12-5 Generalization Among Packages  Packages involved in generalization relationships follow the same principle of substitutability as do classes. A specialized package (such as WindowsGUI) can be used anywhere a more general package (such as GUI) is used. 