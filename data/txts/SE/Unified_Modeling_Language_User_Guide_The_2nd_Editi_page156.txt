The documentation tagged value is discussed in Chapter 6. Note When you render models such as these, you'll typically want to expose elements that are central to each package. To make clear the purpose of each package, you can also expose a documentation tagged value for each package.  Modeling Architectural Views The five views of an architecture are discussed in Chapter 2. Using packages to group related elements is important; you can't develop complex models without doing so. This approach works well for organizing related elements, such as classes, interfaces, components, nodes, and diagrams. As you consider the different views of a software system's architecture, you need even larger chunks. You can use packages to model the views of an architecture. Views are related to models, as discussed in Chapter 31. Remember that a view is a projection into the organization and structure of a system, focused on a particular aspect of that system. This definition has two implications. First, you can decompose a system into almost orthogonal packages, each of which addresses a set of architecturally significant decisions. For example, you might have a design view, a process view, an implementation view, a deployment view, and a use case view. Second, these packages own all the abstractions germane to that view. For example, all the components in your model would belong to the package that represents the implementation view. Note In this regard, packages as views are different from facades. Views own their elements; facades reference the elements that live in other packages. A given element may be owned by exactly one package, but the same element can be referenced by many facades.  To model architectural views, 路 Identify the set of architectural views that are significant in the context of your problem. In practice, this typically includes a design view, a process view, an implementation view, a deployment view, and a use case view. 路 Place the elements (and diagrams) that are necessary and sufficient to visualize, specify, construct, and document the semantics of each view into the appropriate package. 路 As necessary, further group these elements into their own packages. 路 There will typically be dependencies across the elements in different views. So, in general, let each view at the top of a system be open to all others at that level. Modeling systems is discussed in Chapter 31. 