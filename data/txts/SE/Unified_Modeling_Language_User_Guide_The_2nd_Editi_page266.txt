(s and i) communicate with their own Analyst instances (a1 and a2). At least as far as this model goes, the Analyst can be designed under the simplifying assumption that only one flow of control will be active in its instances at a time. Both Analyst instances, however, communicate simultaneously with an AlertManager (named m). Therefore, m must be designed to preserve its semantics in the presence of multiple flows. Both m and c communicate simultaneously with t, a TradingManager. Each flow is given a sequence number that is distinguished by the flow of control that owns it. Figure 22-4 Modeling Flows of Control  Note Interaction diagrams such as these are useful in helping you to visualize where two flows of control might cross paths and, therefore, where you must pay particular attention to the problems of communication and synchronization. Tools are permitted to offer even more distinct visual cues, such as by coloring each flow in a distinct way.  State machines are discussed in Chapter 21. In diagrams such as this, it's also common to attach corresponding state machines, with orthogonal states showing the detailed behavior of each active object. Modeling Interprocess Communication Signals and call events are discussed in Chapter 20. As part of incorporating multiple flows of control in your system, you also have to consider the mechanisms by which objects that live in separate flows communicate with one another. Across threads (which live in the same address space), objects may communicate via signals or call events, the latter of which may exhibit either asynchronous or synchronous semantics. Across processes (which live in separate address spaces), you usually have to use different mechanisms. Modeling location is discussed in Chapter 23. The problem of interprocess communication is compounded by the fact that, in distributed systems, processes may live on separate nodes. Classically, there are two approaches to 