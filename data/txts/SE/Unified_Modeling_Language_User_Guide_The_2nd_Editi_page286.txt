physical models. For example, you may specify an interface for a class in a logical model, and that same interface will carry over to some physical component that realizes it. In software, many operating systems and programming languages directly support the concept of a component. Object libraries, executables, COM+ components, and Enterprise Java Beans are all examples of components that may be represented directly in the UML by using components. Not only can components be used to model these kinds of things, they can also be used to represent other things that participate in an executing system, such as tables, files, and documents. Stereotypes are discussed in Chapter 6. The UML provides a graphical representation of a component, as Figure 25-1 shows. This canonical notation permits you to visualize a component apart from any operating system or programming language. Using stereotypes, one of the UML's extensibility mechanisms, you can tailor this notation to represent specific kinds of components. Figure 25-1 Components  Terms and Concepts A component is a physical and replaceable part of a system that conforms to and provides the realization of a set of interfaces. Graphically, a component is rendered as a rectangle with tabs. Names A component name must be unique within its enclosing package, as discussed in Chapter 12; tagged values and compartments are discussed in Chapter 6. Every component must have a name that distinguishes it from other components. A name is a textual string. That name alone is known as a simple name; a path name is the component name prefixed by the name of the package in which that component lives. A component is typically drawn showing only its name, as in Figure 25-2. Just as with classes, you may draw components adorned with tagged values or with additional compartments to expose their details, as you see in the figure. Figure 25-2 Simple and Extended Components 