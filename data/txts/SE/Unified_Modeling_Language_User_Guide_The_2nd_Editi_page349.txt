Aggregation and generalization are discussed in Chapters 5 and 10. The primary relationship among systems and subsystems is aggregation. A system (the whole) may contain zero or more subsystems (the parts). You can also have generalization relationships among systems and subsystems. Using generalization, you can model families of systems and subsystems, some of which represent general kinds of systems and others of which represent specific tailorings of those systems. Note A system represents the highest-level thing in a given context; the subsystems that make up a system provide a complete and non-overlapping partitioning of the system as a whole.  Models and Views A model is a simplification of reality, in which reality is defined in the context of the system being modeled. In short, a model is an abstraction of a system. A subsystem represents a partitioning of the elements of a larger system into independent parts; a model is a partitioning of the abstractions that visualize, specify, construct, and document that system. The difference is subtle but important. You decompose a system into subsystems so that you can develop and deploy these parts somewhat independently; you partition the abstractions of a system or a subsystem into models so that you can better understand the thing you are developing and deploying. Just as a complex system such as an aircraft may have many parts (for example, the airframe, propulsion, avionics, and passenger subsystems), those subsystems and the system as a whole may be modeled from a number of different points of view (such as from the perspective of structural, dynamic, electrical, and heating/cooling models, for example). Packages are discussed in Chapter 12. A model is a special kind of package. Because you'll rarely need to model models explicitly, there's no special graphical rendering defined for models in the UML. Tools need to manipulate models, however, so a tool will typically use package notation to represent a model as seen by the tool. The five views of a software architecture are discussed in Chapter 2. As a package, a model owns elements. The models associated with a system or subsystem completely partition the elements of that system or subsystem, meaning that every element is owned by exactly one package. Typically, you'll organize the artifacts of a system or subsystem into a set of nonoverlapping models, covered by the five views of software architecture that are described elsewhere. Diagrams are discussed in Chapter 7. A model (for example, a process model) may contain so many artifacts (such as active classes, relationships, and interactions) that in systems of scale, you simply cannot embrace all those artifacts at once. Think of a view as a projection into a model. For each model, you'll have a number of diagrams that exist to give you a peek into the things owned by the model. A view encompasses a subset of the things owned by a model; a view typically may not cross model boundaries. As described in the next section, there are no direct relationships among models, although you'll find trace relationships among the elements contained in different models. Note 