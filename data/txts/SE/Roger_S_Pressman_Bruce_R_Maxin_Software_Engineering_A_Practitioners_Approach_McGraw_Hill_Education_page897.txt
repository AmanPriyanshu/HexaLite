CHAPTER 39  
CONCLUDING COMMENTS 867 
Like all legislation, debate often centers on issues that are political, not tech-nological. However, many people (including us) feel that protective legislation, 

if improperly drafted, conﬂ icts with the software engineering code of ethics by 
indirectly exempting software engineers from their responsibility to produce 
high-quality software.   
 
 
 
 39.6  
A FINAL COMMENT FROM RSP 
 
 
It has been almost three and a half decades since work on the ﬁ rst edition of 
this book began. I [RSP] can still recall sitting at my desk as a young professor, 

writing the manuscript for a book on a subject that few people cared about and 
even fewer really understood. I remember the rejection letters from publishers, 
who argued (politely, but ﬁ
 rmly) that there would never be a market for a book 
on “software engineering.” Luckily, McGraw-Hill decided to give it a try, 
 4 
 
 and the 
rest, as they say, is history. 
  
Since the ﬁ rst edition, this book has changed dramatically—in scope, in size, 
in style, and in content. Like software engineering, it has grown and (I hope) ma-
tured over the years.  An engineering approach to the development of computer software is now conventional wisdom. Debate continues on the “right paradigm,” the importance 
of agility, the degree of automation, and the most effective methods. But the un-

derlying principles of software engineering are now accepted throughout the 
industry. Why, then, have we seen their broad adoption only recently? 
 The answer, I think, lies in the difﬁ
 culty of technology transition and the cul-
tural change that accompanies it. Even though most of us appreciate the need 
for an engineering discipline for software, we struggle against the inertia of past 
practice and face new application domains (and the developers who work in 
them) that appear ready to repeat the mistakes of the past. To ease the transition 

we need many things—an agile, adaptable, and sensible software process; more 
effective methods; more powerful tools; better acceptance by practitioners and 
support from managers; and no small dose of education.  You may not agree with every approach described in this book. Some of the 
techniques and opinions are controversial; others must be tuned to work well in 
different software development environments. It is my sincere hope, however, 

that  Software Engineering: A Practitioner’s Approach
 
 has delineated the prob-
lems we face, demonstrated the strength of software engineering concepts, and 
provided a framework of methods and tools.   
4  Actually, credit should go to Peter Freeman and Eric Munson, who convinced McGraw-Hill that 
it was worth a shot. Almost 2 million copies later, it’s fair to say they made a good decision. 
pre22126_ch39_860-868.indd   867pre22126_ch39_860-868.indd   86713/12/13   6:18 PM13/12/13   6:18 PM