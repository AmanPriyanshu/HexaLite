 Note Directly showing a dependency between two components is actually an elided view of the real intercomponent relationships. A component rarely depends on another component directly but, rather, imports one or more interfaces exported by another. For example, you could have rewritten the figure above by indicating explicitly the interfaces that render.dll realizes (exports) and that animator.exe uses (imports). For simplicity, you can elide these details simply by showing a dependency between the two components.  Packages are discussed in Chapter 12. As your models get bigger, you will find that many components tend to cluster together in groups that are conceptually and semantically related. In the UML, you can use packages to model these clusters of components. Modeling deployment is discussed in Chapter 26. For larger systems that are deployed across several computers, you'll want to model the way your components are distributed by asserting the nodes on which they are located. Modeling Tables, Files, and Documents 