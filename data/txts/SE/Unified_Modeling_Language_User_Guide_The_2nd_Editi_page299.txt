· Use the iconic form of an interface unless it's necessary to explicitly reveal the operations offered by that interface. · Show only those interfaces that are necessary to understand the meaning of that component in the given context. · Especially if you are using components to model things such as libraries and source code, reveal the values of tags associated with versioning. Chapter 26. Deployment In this chapter · Nodes and connections · Modeling processors and devices · Modeling the distribution of components · Systems engineering Nodes, just like components, live in the material world and are an important building block in modeling the physical aspects of a system. A node is a physical element that exists at run time and represents a computational resource, generally having at least some memory and, often, processing capability. You use nodes to model the topology of the hardware on which your system executes. A node typically represents a processor or a device on which components may be deployed. Good nodes crisply represent the vocabulary of the hardware in your solution domain. Getting Started Modeling nonsoftware things is discussed in Chapter 4. The components you develop or reuse as part of a software-intensive system must be deployed on some set of hardware in order to execute. This is in effect what a software-intensive system is all about#such a system encompasses both software and hardware. The five views of an architecture are discussed in Chapter 2. When you architect a software-intensive system, you have to consider both its logical and physical dimensions. On the logical side, you'll find things such as classes, interfaces, collaborations, interactions, and state machines. On the physical side, you'll find components (which represent the physical packaging of these logical things) and nodes (which represent the hardware on which these components are deployed and execute). Stereotypes are discussed in Chapter 6. The UML provides a graphical representation of node, as Figure 26-1 shows. This canonical notation permits you to visualize a node apart from any specific hardware. Using stereotypes#one of the UML's extensibility mechanisms# you can (and often will) tailor this notation to represent specific kinds of processors and devices. Figure 26-1 Nodes 