 Dependencies are discussed in Chapters 5 and 10; stereotypes are discussed in Chapter 6. As the figure goes on to show, you can model the instantiation of a template class in two ways. First, you can do so implicitly, by declaring a class whose name provides the binding. Second, you can do so explicitly, by using a dependency stereotyped as bind, which specifies that the source instantiates the target template using the actual parameters. Standard Elements The UML's extensibility mechanisms are discussed in Chapter 6; interface, type, and implementationClass are discussed in Chapter 11; actors are discussed in Chapter 16; signals are discussed in Chapter 20. All of the UML's extensibility mechanisms apply to classes. Most often, you'll use tagged values to extend class properties (such as specifying the version of a class) and stereotypes to specify new kinds of components (such as model- specific components). The UML defines four standard stereotypes that apply to classes. 1. metaclass  Specifies a classifier whose objects are all classes 2. powertype  Specifies a classifier whose objects are the children of a given parent 3. stereotype  Specifies that the classifier is a stereotype that may be applied to other elements 4. utility  Specifies a class whose attributes and operations are all class scoped Note A number of other standard stereotypes or keywords that apply to classes are discussed elsewhere: interface, type, implementationClass, actor, exception, signal, process, and thread. Common Modeling Techniques Modeling the Semantics of a Class The common uses of classes are discussed in Chapter 4. 