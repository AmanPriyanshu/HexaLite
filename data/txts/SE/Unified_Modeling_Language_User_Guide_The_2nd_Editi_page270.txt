The passing of messages represents the dynamic aspect of any system, so when you model the time-critical nature of a system with the UML, you can give a name to each message in an interaction to be used as a timing mark. Messages in an interaction are usually not given names. They are mainly rendered with the name of an event, such as a signal or a call. As a result, you can't use the event name to write an expression because the same event may trigger different messages. If the designated message is ambiguous, use the explicit name of the message in a timing mark to designate the message you want to mention in a time expression. A timing mark is nothing more than an expression formed from the name of a message in an interaction. Given a message name, you can refer to any of three functions of that message#that is, startTime, stopTime, and executionTime. You can then use these functions to specify arbitrarily complex time expressions, perhaps even using weights or offsets that are either constants or variables (as long as those variables can be bound at execution time). Finally, as shown in Figure 23-2, you can place these time expressions in a timing constraint to specify the timing behavior of the system. As constraints, you can render them by placing them adjacent to the appropriate message, or you can explicitly attach them using dependency relationships. Figure 23-2 Time  Note Especially for complex systems, it's a good idea to write expressions with named constants instead of writing explicit times. You can define those constants in one part of your model and then refer to those constants in multiple places. In that way, it's easier to update your model if the timing requirements of your system change.  The semantics tagged value is discussed in Chapter 9 Note You can also apply time expressions to operations. The standard tagged value called semantics can be attached to any operation, and by using a time expression there, you can specify the operation's time complexity. Time complexity typically models the minimum, maximum, and/or average time in which you expect that operation to complete. Specifying an operation's time complexity in effect specifies a time budget for the operation, which you can use in two ways. First, by asserting your time budgets 