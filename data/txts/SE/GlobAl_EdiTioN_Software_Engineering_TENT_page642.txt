˜˜˚˛˝˙ˆˇ˘
˜˜˜˜˜˜
˜Software project management is an essential part of software engineering. Projects 
need to be managed because professional software engineering is always subject to 

organizational budget and schedule constraints. The project manager™s job is to ensure 

that the software project meets and overcomes these constraints as well as delivering 

high-quality software. Good management cannot guarantee project success. However, 

bad management usually results in project failure: The software may be delivered late, 

cost more than originally estimated, or fail to meet the expectations of customers.The success criteria for project management obviously vary from project to pro
-ject, but, for most projects, important goals are:˜ to deliver the software to the customer at the agreed time;˜ to keep overall costs within budget;˜ to deliver software that meets the customer™s expectations;˜ to maintain a coherent and well-functioning development team.These goals are not unique to software engineering but are the goals of all 
 engineering projects. However, software engineering is different from other types of engineering in a number of ways that make software management particularly chal-
lenging. Some of these differences are:1. The product is intangible A manager of a shipbuilding or a civil engineering 
project can see the product being developed. If a schedule slips, the effect on the 

product is visibleŠparts of the structure are obviously unfinished. Software is 
intangible. It cannot be seen or touched. Software project managers cannot see 

progress by looking at the artifact that is being constructed. Rather, they rely on 
others to produce evidence that they can use to review the progress of the work.2. Large software projects are often ﬁone-offﬂ projects Every large software 

development project is unique because every environment where software is 

developed is, in some ways, different from all others. Even managers who have 
a large body of previous experience may find it difficult to anticipate problems. 
Furthermore, rapid technological changes in computers and communications 

can make experience obsolete. Lessons learned from previous projects may not 
be readily transferable to new projects.3. Software processes are variable and organization-specific The engineering process 

for some types of system, such as bridges and buildings, is well understood. However, 

different companies use quite different software development  processes. We cannot 
reliably predict when a particular software process is likely to lead to development 

problems. This is especially true when the software project is part of a wider systems 

engineering project or when completely new software is being developed.Because of these issues, it is not surprising that some software projects are late, overbudget, and behind schedule. Software systems are often new, very complex, 

and technically innovative. Schedule and cost overruns are also common in other 
