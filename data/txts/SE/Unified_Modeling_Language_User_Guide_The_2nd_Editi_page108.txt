Transaction class (an implementation artifact, representing an atomic action). In the deployed system, you might have a Pricing component, with instances living on every client node. Each of these abstractions will have instances; separating the essence and the instance of the things in your world is an important part of modeling. Instances are discussed in Chapter 13; packages are discussed in Chapter 12; generalization is discussed in Chapters 5 and 10; associations are discussed in Chapters 5 and 10; messages are discussed in Chapter 15; interfaces are discussed in Chapter 11; datatypes are discussed in Chapters 4 and 11; signals are discussed in Chapter 20; components are discussed in Chapter 25; nodes are discussed in Chapter 26; use cases are discussed in Chapter 16; subsystems are discussed in Chapter 31. Some things in the UML don't have instances#for example, packages and generalization relationships. In general, those modeling elements that can have instances are called classifiers (associations and messages can have instances as well, but their instances are not quite the same as the instances of a class). Even more important, a classifier has structural features (in the form of attributes), as well as behavioral features (in the form of operations). Every instance of a given classifier shares the same features. The most important kind of classifier in the UML is the class. A class is a description of a set of objects that share the same attributes, operations, relationships, and semantics. Classes are not the only kind of classifier, however. The UML provides a number of other kinds of classifiers to help you model. $ Interface  A collection of operations that are used to specify a service of a class or a component $ Datatype  A type whose values have no identity, including primitive built-in types (such as numbers and strings), as well as enumeration types (such as Boolean) $ Signal  The specification of an asynchronous stimulus communicated between instances $ Component  A physical and replaceable part of a system that conforms to and provides the realization of a set of interfaces $ Node  A physical element that exists at run time and that represents a computational resource, generally having at least some memory and often processing capability $ Use case  A description of a set of a sequence of actions, including variants, that a system performs that yields an observable result of value to a particular actor $ Subsystem  A grouping of elements of which some constitute a specification of the behavior offered by the other contained elements For the most part, every kind of classifier has both structural and behavioral features (interfaces are the one exception; they may not have attributes). Furthermore, when you model with any of these classifiers, you may use all the advanced features described in this chapter to provide the level of detail you need to capture the meaning of the abstraction. Graphically, the UML distinguishes among these different classifiers, as Figure 9-2 shows. Figure 9-2 Classifiers 