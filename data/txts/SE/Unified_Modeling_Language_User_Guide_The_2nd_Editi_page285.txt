Chapter 25. Components In this chapter · Components, interfaces, and realization · Modeling executables and libraries · Modeling tables, files, and documents · Modeling an API · Modeling source code · Mapping between logical and physical models Components live in the material world of bits and therefore are an important building block in modeling the physical aspects of a system. A component is a physical and replaceable part of a system that conforms to and provides the realization of a set of interfaces. You use components to model the physical things that may reside on a node, such as executables, libraries, tables, files, and documents. A component typically represents the physical packaging of otherwise logical elements, such as classes, interfaces, and collaborations. Good components define crisp abstractions with well-defined interfaces, making it possible to easily replace older components with newer, compatible ones. Getting Started The end product of a construction company is a physical building that exists in the real world. You build logical models to visualize, specify, and document your decisions about the building envelope; the placement of walls, doors, and windows; the routing of electrical and plumbing systems; and the overall architectural style. When you actually construct the building, these walls, doors, windows, and other conceptual things get turned into real, physical things. The differences between building a dog house and building a high rise are discussed in Chapter 1. These logical and physical views are both necessary. If you are building a disposable building for which the cost of scrap and rework is essentially zero (for example, if you are building a doghouse), you can probably go straight to the physical building without doing any logical modeling. If, on the other hand, you are building something enduring for which the cost of change or failure is high, then building both logical and physical models is the pragmatic thing to do to manage risk. It's the same thing when building a software-intensive system. You do logical modeling to visualize, specify, and document your decisions about the vocabulary of your domain and the structural and behavioral way those things collaborate. You do physical modeling to construct the executable system. Whereas these logical things live in the conceptual world, the physical things live in the world of bits#that is, they ultimately reside on physical nodes and can be executed directly or can, in some indirect manner, participate in an executing system. Interfaces are discussed in Chapter 11. In the UML, all these physical things are modeled as components. A component is a physical thing that conforms to and realizes a set of interfaces. Interfaces therefore bridge your logical and 