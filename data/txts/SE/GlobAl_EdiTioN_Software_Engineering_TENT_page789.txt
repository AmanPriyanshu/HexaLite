˜˚˛˝˙ˆˇ˘˜˜
˜˚˛modeling systems, 25, 138Œ66models, 45Œ54, 138Œ66. See also spiral models; UML (Unified modeling Language)activity diagrams (UML) for, 33Œ34, 141, 143Œ44, 163activity stages, 47Œ48, 142
agile approach and, 50, 162
algorithmic cost modeling, 683, 684Œ86
application architecture, 185
behavioral, 154Œ59, 163
class diagrams for, 149Œ50
COCOMO II, 276, 476, 686Œ96
component, 470Œ73, 487
context, 141Œ44, 163, 199Œ200
data-driven, 154Œ55
dynamic, 199, 205, 206, 222
event-driven, 156Œ57
formal (mathematical), 139, 300
generalization, 152Œ53, 205
incremental development, 46, 49Œ51
integration and configuration, 46, 52Œ54
interaction, 144Œ49, 163, 199Œ200, 496Œ97
ISO 9000 standards framework, 708Œ10, 734object-oriented design, 199Œ200, 204Œ08
open-source licensing, 220Œ21
processes, 45Œ54, 68
project estimation, 682Œ96, 696
quality management (QM) and, 709Œ10, 719
real-time system design, 617Œ19
reliability growth, 334
RUP (Rational Unified Process), 46Œ47
reuse-based development, 52Œ54
sequence, 144, 146Œ49, 155, 163, 205, 206Œ07
spiral, 63, 256Œ57
state machine, 205, 207Œ08, 222, 617Œ18, 634
state-based, 156Œ158, 163
static, 205, 222
stimulus/response, 613Œ14, 634
structural, 149Œ54, 163, 199, 205
subsystem, 205Œ06
‚Swiss cheese,™ 420Œ21
of testing process, 230Œ31
UML (Unified Modeling Language), 33Œ34, 139, 140Œ41, 144Œ49, 713use case, 125Œ26, 141, 144Œ46, 163, 200Œ01model-view-controller (MVC) pattern, 176Œ77, 179, 444monitoring projects, 651Œ52, 673motivation (people management), 653Œ56
multi-tenancy, 514, 515, 516
multi-tier client-server architecture, 501, 505Œ06
MySQL, 219, 445N-version programming, 322Œ23
namespaces, 528Œ29
natural language requirements, 121Œ22
nested technical and sociotechnical systems, 416Œ17.NET framework, 161, 443, 446, 466, 470Œ71, 478, 507non-deterministic properties, 561Œ62
non-functional requirements, 105, 107Œ11, 134, 169, 172Œ73, 312, 314Œ18, 547object and function reuse, 438
object classes, 149Œ50, 202Œ04, 470
object constraint language (OCL), 208, 484Œ85
object level (reuse), 214
Object Management Group (OMG), 159
object-oriented metrics, 721Œ22
object-oriented systemsarchitectural design and, 201Œ02
class diagrams for, 149Œ50
class identification, 202Œ04
design, 198Œ209, 222
frameworks in, 444
interface specification, 208Œ09
system (design) models, 204Œ08
Unified Modeling Language (UML) and, 140, 198Œ209use case model, 200Œ01Objectory method, 125
observe and react pattern, 620, 621Œ23
Observer pattern, 210Œ11
on-site customer, 78
openness, distributed software, 491, 492, 493
open-source development, 219Œ21, 222, 738Œ39