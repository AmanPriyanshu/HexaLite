               public void register() {           CourseCollection c = getSchedule();           for (int i = 0; i < c.size(); i++)             c.item(i).add(this);           this.registered = true;         } "Reasonably clever" means the tool would have to realize that getSchedule returns a CourseCollection object, which it could determine by looking at the operation's signature. By walking across the contents of this object using a standard iteration idiom (which the tool could know about implicitly), the code could then generalize to any number of course offerings. Reverse engineering (the creation of a model from code) is also possible for both sequence and collaboration diagrams, especially if the context of the code is the body of an operation. Segments of the previous diagram could have been produced by a tool from a prototypical execution of the register operation. Note Forward engineering is straightforward; reverse engineering is hard. It's easy to get too much information from simple reverse engineering, and so the hard part is being clever about what details to keep.  However, more interesting than the reverse engineering of a model from code is the animation of a model against the execution of a deployed system. For example, given the previous diagram, a tool could animate the messages in the diagram as they were dispatched in a running system. Even better, with this tool under the control of a debugger, you could control the speed of execution, possibly setting breakpoints to stop the action at interesting points to examine the attribute values of individual objects. Hints and Tips When you create interaction diagrams in the UML, remember that sequence diagrams and collaboration diagrams are both projections on the same model of a system's dynamic aspects. No single interaction diagram can capture everything about a system's dynamic aspects. Rather, you'll want to use many interaction diagrams to model the dynamics of the system as a whole, as well as its subsystems, operations, classes, use cases, and collaborations. A well-structured interaction diagram · Is focused on communicating one aspect of a system's dynamics. · Contains only those elements that are essential to understanding that aspect. · Provides detail consistent with its level of abstraction and should expose only those adornments that are essential to understanding. · Is not so minimalist that it misinforms the reader about semantics that are important. When you draw an interaction diagram, · Give it a name that communicates its purpose. 