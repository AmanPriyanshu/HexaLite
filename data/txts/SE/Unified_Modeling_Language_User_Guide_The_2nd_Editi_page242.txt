A number of software-intensive systems behave just like that thermostat. A pacemaker runs continuously but adapts to changes in blood pressure or activity. A network router runs continuously, as well, silently guiding asynchronous streams of bits, sometimes adapting its behavior in response to commands from the network administrator. A cell phone works on demand, responding to input from the user and to messages from the local cells. Modeling thestructural aspects of a system is discussed in Sections 2 and 3. In the UML, you model the static aspects of a system by using such elements as class diagrams and object diagrams. These diagrams let you visualize, specify, construct, and document the things that live in your system, including classes, interfaces, components, nodes, and use cases and their instances, together with the way those things sit in relationship to one another. You can also model the dynamic aspects of a system by using interactions, as discussed in Chapter 15; events are discussed in Chapter 20. In the UML, you model the dynamic aspects of a system by using state machines. Whereas an interaction models a society of objects that work together to carry out some action, a state machine models the lifetime of a single object, whether it is an instance of a class, a use case, or even an entire system. In the life of an object, it may be exposed to a variety of events, such as a signal, the invocation of an operation, the creation or destruction of the object, the passing of time, or the change in some condition. In response to these events, the object reacts with some action, which represents an atomic computation that results in a change in state of the object or the return of a value. The behavior of such an object is therefore affected by the past. An object may receive an event, respond with an action, then change its state. An object may receive another event, and its response may be different, depending on its current state in response to the previous event. Activity diagrams are discussed in Chapter 19; statechart diagrams are discussed in Chapter 24. You use state machines to model the behavior of any modeling element, although, most commonly, that will be a class, a use case, or an entire system. State machines may be visualized in two ways. First, using activity diagrams, you can focus on the activities that take place within the object. Second, using statechart diagrams, you can focus on the event-ordered behavior of an object, which is especially useful in modeling reactive systems. The UML provides a graphical representation of states, transitions, events, and actions, as Figure 21-1 shows. This notation permits you to visualize the behavior of an object in a way that lets you emphasize the important elements in the life of that object. Figure 21-1 State Machines 