Modeling the executables and libraries that make up the physical implementation of your system is useful, but often you'll find there are a host of ancillary deployment components that are neither executables nor libraries and yet are critical to the physical deployment of your system. For example, your implementation might include data files, help documents, scripts, log files, initialization files, and installation/removal files. Modeling these components is an important part of controlling the configuration of your system. Fortunately, you can use UML components to model all of these artifacts. To model tables, files, and documents, · Identify the ancillary components that are part of the physical implementation of your system. · Model these things as components. If your implementation introduces new kinds of artifacts, introduce a new appropriate stereotype. · As necessary to communicate your intent, model the relationships among these ancillary components and the other executables, libraries, and interfaces in your system. Most often, you'll want to model the dependencies among these parts in order to visualize the impact of change. For example, Figure 25-6 builds on the previous figure and shows the tables, files, and documents that are part of the deployed system surrounding the executable animator.exe. This figure includes one document (animator.hlp), one simple file (animator.ini), and one database table (shapes.tbl), all of which use the UML's standard elements for documents, files, and tables, respectively. Figure 25-6 Modeling Tables, Files, and Documents 