˜˜
˚˛˝˙ˆˇ˘˜˜˚˜˜˜˜˜In all cases, you tackle the problem of incompatibility by writing an adaptor that reconciles the interfaces of the two components being reused. An adaptor compo-nent converts one interface to another.The precise form of the adaptor depends on the type of composition. Sometimes, as 
in the next example, the adaptor takes a result from one component and converts it into 

a form where it can be used as an input to another. In other cases, the adaptor may be 

called by component A as a proxy for component B. This situation occurs if A wishes 

to call B, but the details of the ﬁrequiresﬂ interface of A do not match the details of the 

ﬁprovidesﬂ interface of B. The adaptor reconciles these differences by converting its 

input parameters from A into the required input parameters for B. It then calls B to 

deliver the services required by A.To illustrate adaptors, consider the two simple components shown in Figure 16.11, 
whose interfaces are incompatible. These might be part of a system used by the emer-
gency services. When the emergency operator takes a call, the phone number is input 

to the addressFinder component to locate the address. Then, using the mapper compo-nent, the operator prints a map to be sent to the vehicle dispatched to the emergency.The first component, addressFinder, finds the address that matches a phone num-ber. It can also return the owner of the property associated with the phone number and 

the type of property. The mapper component takes a post code (in the United States, 
a standard ZIP code with the additional four digits identifying property location) and 

displays or prints a street map of the area around that code at a specified scale.These components are composable in principle because the property location 
includes the post or ZIP code. However, you have to write an adaptor component 

called postCodeStripper that takes the location data from addressFinder and strips out 
the post code. This post code is then used as an input to mapper, and the street map is 

displayed at a scale of 1:10,000. The following code, which is an example of sequential 

composition, illustrates the sequence of calls that is required to implement this process:address ˜ addressFinder.location (phonenumber) ;postCode ˜ postCodeStripper.getPostCode (address) ;mapper.displayMap(postCode, 10000) ;Another case in which an adaptor component may be used is in hierarchical composi
-tion, where one component wishes to make use of another but there is an incompatibility 
addressFinderphoneDatabase (string command)string location (string pn)string owner (string pn)string propertyType (string pn)
mappermapDB (string command)displayMap (string postCode, scale)printMap (string postCode, scale)Figure 16.11  Components with 
incompatible interfaces 