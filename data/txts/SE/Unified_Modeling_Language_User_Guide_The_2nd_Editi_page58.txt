Types are discussed in Chapter 11. As Figure 4-12 shows, these things can be modeled in the UML as types or enumerations, which are rendered just like classes but are explicitly marked via stereotypes. Things like integers (represented by the class Int) are modeled as types, and you can explicitly indicate the range of values these things can take on by using a constraint. Similarly, enumeration types, such as Boolean and Status, can be modeled as enumerations, with their individual values provided as attributes. Figure 4-12 Modeling Primitive Types  Note Some languages, such as C and C++, let you set an equivalent integer value for an enumeration. You can model this in the UML by marking the attributes that denote an enumeration with a constant default initial value. Hints and Tips When you model classes in the UML, remember that every class should map to some tangible or conceptual abstraction in the domain of the end user or the implementer. A well-structured class 路 Provides a crisp abstraction of something drawn from the vocabulary of the problem domain or the solution domain. 路 Embodies a small, well-defined set of responsibilities and carries them all out very well. 路 Provides a clear separation of the abstraction's specification and its implementation. 路 Is understandable and simple yet extensible and adaptable. 