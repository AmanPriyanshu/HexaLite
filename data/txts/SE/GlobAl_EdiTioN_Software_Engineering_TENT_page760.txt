˜˙ˆ˜˜˚˛˝˙˙ˆˇ˘
clientŒserver architectureAn architectural model for distributed systems where the system functionality is offered as a set of services provided by a server. These are accessed by client com-
puters that make use of the services. Variants of this approach, such as three-tier 
clientŒserver architectures, use multiple servers.cloud computingThe provision of computing and/or application services over the Internet using a 
‚cloud™ of servers from an external provider. The ‚cloud™ is implemented using a 
large number of commodity computers and virtualization technology to make  effective use of these systems.CMMIAn integrated approach to process capability maturity modeling based on the adop-
tion of good software engineering practice and integrated quality management. It 
supports discrete and continuous maturity modeling and integrates systems and 
software engineering process maturity models. Developed from the original Capa-
bility Maturity Model.COCOMO IISee Constructive Cost Modeling.code of ethics and professional practiceA set of guidelines that set out expected ethical and professional behavior for 

software engineers. This was defined by the major US professional societies (the 

ACM and the IEEE) and defines ethical behavior under eight headings: public, 

client and employer, product, judgment, management, colleagues, profession 

and self.Common Request Broker Architecture (CORBA)A set of standards proposed by the Object Management Group (OMG) that defines 
distributed component models and communications. Influential in the development 
of distributed systems but no longer widely used.componentA deployable, independent unit of software that is completely defined and accessed 
through a set of interfaces.component modelA set of standards for component implementation, documentation and deploy-
ment. These cover the specific interfaces that may be provided by a compo-
nent, component naming, component interoperation and component 

composition. Component models provide the basis for middleware to support 

executing components.component-based software engineering (CBSE)The development of software by composing independent, deployable software 
components that are consistent with a component model.