Figure 8-4 Forward Engineering  All of these classes specify a mapping to Java, as noted in their tagged value. Forward engineering the classes in this diagram to Java is straightforward, using a tool. Forward engineering the class EventHandler yields the following code.                 public abstract class EventHandler {             EventHandler successor;            private Integer currentEventID;            private String source;             EventHandler() {}            public void handleRequest() {}           } Reverse engineering is the process of transforming code into a model through a mapping from a specific implementation language. Reverse engineering results in a flood of information, some of which is at a lower level of detail than you'll need to build useful models. At the same time, reverse engineering is incomplete. There is a loss of information when forward engineering models into code, and so you can't completely recreate a model from code unless your tools encode information in the source comments that goes beyond the semantics of the implementation language. Figure 3-3 was created by reverse engineering part of theJava class library. To reverse engineer a class diagram, · Identify the rules for mapping from your implementation language or languages of choice. This is something you'll want to do for your project or your organization as a whole. · Using a tool, point to the code you'd like to reverse engineer. Use your tool to generate a new model or modify an existing one that was previously forward engineered. 