You can apply use cases to your whole system. You can also apply use cases to part of your system, including subsystems and even individual classes and interfaces. In each case, these use cases not only represent the desired behavior of these elements, but they can also be used as the basis of test cases for these elements as they evolve during development. Use cases applied to subsystems are excellent sources of regression tests; use cases applied to the whole system are excellent sources of integration and system tests. The UML provides a graphical representation of a use case and an actor, as Figure 16-1 shows. This notation permits you to visualize a use case apart from its realization and in context with other use cases. Figure 16-1 Actors and Use Cases  Terms and Concepts The notation for use cases is similar to that for collaborations, as discussed in Chapter 27. A use case is a description of a set of sequences of actions, including variants, that a system performs to yield an observable result of value to an actor. Graphically, a use case is rendered as an ellipse. Names A use case name must be unique within its enclosing package, as discussed in Chapter 12. Every use case must have a name that distinguishes it from other use cases. A name is a textual string. That name alone is known as a simple name; a path name is the use case name prefixed by the name of the package in which that use case lives. A use case is typically drawn showing only its name, as in Figure 16-2. Figure 16-2 Simple and Path Names 