-  Figure 9-3 shows a mix of public, protected, and private figures for the class Toolbar. Figure 9-3 Visibility  When you specify the visibility of a classifier's features, you generally want to hide all its implementation details and expose only those features that are necessary to carry out the responsibilities of the abstraction. That's the very basis of information hiding, which is essential to building solid, resilient systems. If you don't explicitly adorn a feature with a visibility symbol, you can usually assume that it is public. Note The UML's visibility property matches the semantics common among most programming languages, including C++, Java, Ada, and Eiffel.  Scope Instances are discussed in Chapter 13. Another important detail you can specify for a classifier's attributes and operations is its owner scope. The owner scope of a feature specifies whether the feature appears in each instance of the classifier or whether there is just a single instance of the feature for all instances of the classifier. In the UML, you can specify two kinds of owner scope. 1. instance  Each instance of the classifier holds its own value for the feature. 2. classifier  There is just one value of the feature for all instances of the classifier. As Figure 9-4 (a simplification of the first figure) shows, a feature that is classifier scoped is rendered by underlining the feature's name. No adornment means that the feature is instance scoped. Figure 9-4 Owner Scope 