2. Object diagram 3. Component diagram 4. Deployment diagram You'll often use five additional diagrams to view the dynamic parts of a system. 1. Use case diagram 2. Sequence diagram 3. Collaboration diagram 4. Statechart diagram 5. Activity diagram The UML defines these nine kinds of diagrams. Packages are discussed in Chapter 12. Every diagram you create will most likely be one of these nine or occasionally of another kind, defined for your project or organization. Every diagram must have a name that's unique in its context so that you can refer to a specific diagram and distinguish one from another. For anything but the most trivial system, you'll want to organize your diagrams into packages. You can project any combination of elements in the UML in the same diagram. For example, you might show both classes and objects in the same diagram (a common thing to do), or you might even show both classes and components in the same diagram (legal, but less common). Although there's nothing that prevents you from placing wildly disparate kinds of modeling elements in the same diagram, it's more common for you to have roughly the same kinds of things in one diagram. In fact, the UML's defined diagrams are named after the element you'll most often place in each. For example, if you want to visualize a set of classes and their relationships, you'll use a class diagram. Similarly, if you want to visualize a set of components, you'll use a component diagram. Note In practice, all the diagrams you'll create will be two-dimensional, meaning that they are just flat graphs of vertices and arcs that are drawn on a sheet of paper, a whiteboard, the back of an envelope, or on a computer display. The UML allows you to create three-dimensional diagrams, meaning that they are graphs with depth, allowing you to "swim" through a model. Some virtual reality research groups have already demonstrated this advanced use of the UML.  Structural Diagrams The UML's four structural diagrams exist to visualize, specify, construct, and document the static aspects of a system. You can think of the static aspects of a system as representing its relatively stable skeleton and scaffolding. Just as the static aspects of a house encompass the existence and placement of such things as walls, doors, windows, pipes, wires, and vents, so too do the static aspects of a software system encompass the existence and placement of such things as classes, interfaces, collaborations, components, and nodes. 