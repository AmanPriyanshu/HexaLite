˜˜˚˛˝˙ˆˇ˘
˜˜˚˜˜˜
˜tasks that they will implement. Each developer knows their individual velocity and so should not sign up for more tasks than they can implement in the time allotted.This approach to task allocation has two important benefits:1. The whole team gets an overview of the tasks to be completed in an iteration. 

They therefore have an understanding of what other team members are doing 

and who to talk to if task dependencies are identified.2. Individual developers choose the tasks to implement; they are not simply allo-
cated tasks by a project manager. They therefore have a sense of ownership in 
these tasks, and this is likely to motivate them to complete the task.Halfway through an iteration, progress is reviewed. At this stage, half of the story effort points should have been completed. So, if an iteration involves 24 story points 
and 36 tasks, 12 story points and 18 tasks should have been completed. If this is not 
the case, then there has to be discussions with the customer about which stories 

should be removed from the system increment that is being developed.This approach to planning has the advantage that a software increment is always delivered at the end of each project iteration. If the features to be included in the 

increment cannot be completed in the time allowed, the scope of the work is reduced. 
The delivery schedule is never extended. However, this can cause problems as it 

means that customer plans may be affected. Reducing the scope may create extra 

work for customers if they have to use an incomplete system or change the way they 
work between one release of the system and another.A major difficulty in agile planning is that it relies on customer involvement and availability. This involvement can be difficult to arrange, as customer representa-tives sometimes have to prioritize other work and are not available for the planning 
game. Furthermore, some customers may be more familiar with traditional project 
plans and may find it difficult to engage in an agile planning process.Agile planning works well with small, stable development teams that can get 
together and discuss the stories to be implemented. However, where teams are large 
and/or geographically distributed, or when team membership changes frequently, it 
is practically impossible for everyone to be involved in the collaborative planning 
that is essential for agile project management. Consequently, large projects are usu-
ally planned using traditional approaches to project management.’
Estimating project schedules is difficult. You have to make initial estimates on the 

basis of an incomplete user requirements definition. The software may have to run on 

unfamiliar platforms or use new development technology. The people involved in the 

project and their skills will probably not be known. There are so many uncertainties 

that it is impossible to estimate system development costs accurately during the early 
