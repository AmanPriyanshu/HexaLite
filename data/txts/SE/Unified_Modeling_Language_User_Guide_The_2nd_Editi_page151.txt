Note Actually, two stereotypes apply here#import and access# and both specify that the source package has access to the contents of the target. Import adds the contents of the target to the source's namespace, and so you don't have to qualify their names. This admits the possibility of name clashes which you must avoid to keep the model well-formed. Access does not add the contents of the target, and so you do have to qualify their names. Most of the time you'll use import.  Interfaces, an element often exported by packages, are discussed in Chapter 11. The public parts of a package are called its exports. For example, in Figure 12-4, the package GUI exports two classes, Window and Form. EventHandler is not exported by GUI; EventHandler is a protected part of the package. Figure 12-4 Importing and Exporting  The parts that one package exports are visible only to the contents of those packages that explicitly import the package. In this example, Policies explicitly imports the package GUI. GUI::Window and GUI::Form are therefore made visible to the contents of the package Policies. However, GUI::EventHandler is not visible because it is protected. Because the package Server doesn't import GUI, the contents of Server don't have permission to access any of the contents of GUI. Similarly, the contents of GUI don't have permission to access any of the contents of Server. 