during development and then by measuring the running system, you can make intelligent comparisons about the as-designed versus the as-built behavior of your system. Second, by adding up the results (designed or actual) of the time expression for all the operations in an interaction, you can calculate the time complexity of an entire transaction.  Location Components are discussed in Chapter 25 ; nodes are discussed in Chapter 26. Distributed systems, by their nature, encompass components that are physically scattered among the nodes of a system. For many systems, components are fixed in place at the time they are loaded on the system; in other systems, components may migrate from node to node. Deployment diagrams are discussed in Chapter 30 ; the class/ object dichotomy is discussed in Chapters 2 and 13. In the UML, you model the deployment view of a system by using deployment diagrams that represent the topology of the processors and devices on which your system executes. Components such as executables, libraries, and tables reside on these nodes. Each instance of a node will own instances of certain components, and each instance of a component will be owned by exactly one instance of a node (although instances of the same kind of component may be spread across different nodes). For example, as Figure 23-3 shows, the executable component vision.exe may reside on the node named KioskServer. Figure 23-3 Location  Classes are discussed in Chapters 4 and 9. Instances of plain classes may reside on a node, as well. For example, as Figure 23-3 shows, an instance of the class LoadAgent lives on the node named Router. Tagged values and extra compartments are discussed in Chapter 6 The become and copy stereotypes are discussed in Chapter 13. As the figure illustrates, you can model the location of an element in two ways in the UML. First, as shown for the KioskServer, you can physically nest the element (textually or graphically) in a extra compartment in its enclosing node. Second, as shown for the LoadAgent, you can use the defined tagged value location to designate the node on which the class instance resides. 