 transient object  An object that exists only during the execution of the thread or process that created it.  transition  The fourth phase of the software development life cycle, in which the software is turned into the hands of the user community; a relationship between two states indicating that an object in the first state will perform certain actions and enter the second state when a specified event occurs and conditions are satisfied.  type  A stereotype of class used to specify a domain of objects, together with the operations (but not methods) applicable to the objects.  type expression  An expression that evaluates to a reference to one or more types.  UML  The Unified Modeling Language, a language for visualizing, specifying, constructing, and documenting the artifacts of a software-intensive system.  usage  A dependency in which one element (the client) requires the presence of another element (the supplier) for its correct functioning or implementation.  use case  A description of a set of sequences of actions, including variants, that a system performs that yields an observable result of value to an actor.  use case diagram  A diagram that shows a set of use cases and actors and their relationships; use case diagrams address the static use case view of a system.  use case driven  In the context of the software development life cycle, a process in which use cases are used as a primary artifact for establishing the desired behavior of the system, for verifying and validating the system's architecture, for testing, and for communicating among the stakeholders of the project.  