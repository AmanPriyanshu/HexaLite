Note In many ways, a component diagram is just a special kind of class diagram that focuses on a system's components.  Common Uses Implementation views, in the context of software architecture, are discussed in Chapter 2. You use component diagrams to model the static implementation view of a system. This view primarily supports the configuration management of a system's parts, made up of components that can be assembled in various ways to produce a running system. When you model the static implementation view of a system, you'll typically use component diagrams in one of four ways. 1. To model source code With most contemporary object-oriented programming languages, you'll cut code using integrated development environments that store your source code in files. You can use component diagrams to model the configuration management of these files, which represent work-product components. 2. To model executable releases A release is a relatively complete and consistent set of artifacts delivered to an internal or external user. In the context of components, a release focuses on the parts necessary to deliver a running system. When you model a release using component diagrams, you are visualizing, specifying, and documenting the decisions about the physical parts that constitute your software#that is, its deployment components. Persistence is discussed in Chapter 23; modeling logical database schemas is discussed in Chapter 8. 3. To model physical databases Think of a physical database as the concrete realization of a schema, living in the world of bits. Schemas, in effect, offer an API to persistent information; the model of a physical database represents the storage of that information in the tables of a relational database or the pages of an object-oriented database. You use component diagrams to represent these and other kinds of physical databases. 4. To model adaptable systems Some systems are quite static; their components enter the scene, participate in an execution, and then depart. Other systems are more dynamic, involving mobile agents or components that migrate for purposes of load balancing and failure recovery. You use component diagrams in conjunction with some of the UML's diagrams for modeling behavior to represent these kinds of systems. Common Modeling Techniques Modeling Source Code 