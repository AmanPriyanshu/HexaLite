For example, Figure 18-4 shows a sequence diagram that specifies the flow of control involved in initiating a simple, two-party phone call. At this level of abstraction, there are four objects involved: two Callers (s and r), an unnamed telephone Switch, and c, the reification of the Conversation between the two parties. The sequence begins with one Caller (s) dispatching a signal (liftReceiver) to the Switch object. In turn, the Switch calls setDialTone on the Caller, and the Caller iterates on the message dialDigit. Note that this message has a timing mark (dialing) that is used in a timing constraint (its executionTime must be less than 30 seconds). This diagram does not indicate what happens if this time constraint is violated. For that you could include a branch or a completely separate sequence diagram. The Switch object then calls itself with the message routeCall. It then creates a Conversation object (c), to which it delegates the rest of the work. Although not shown in this interaction, c would have the additional responsibility of being a party in the switch's billing mechanism (which would be expressed in another interaction diagram). The Conversation object (c) rings the Caller (r), who asynchronously sends the message liftReceiver. The Conversation object then tells the Switch to connect the call, then tells both Caller objects to connect, after which they may exchange information, as indicated by the attached note. Figure 18-4 Modeling Flows of Control by Time Ordering  Note In sequence diagrams, you may want to model the changing state, role, or attributes values of an object. There are two ways to do this. First, the object may appear multiple times in the diagram, each showing different state, role, or attribute values, and then you use a transition stereotyped as become to indicate its change. Second, for changing state, you can place a state icon directly on the object's lifeline. 