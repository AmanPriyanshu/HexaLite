 Note A minimalist approach would have used one icon for all classifiers. That doesn't make sense because, for example, classes and components are very different abstractions (one is logical, the other physical), so having a distinctive visual cue was deemed important. Similarly, a maximal approach would have used different icons for each kind of classifier. That doesn't make sense either because, for example, classes and datatypes aren't that different. The design of the UML strikes a balance#those classifiers that are materially different from others have their own icon, and those that are not materially different use special keywords (such as type, signal, and subsystem).  Visibility One of the most important details you can specify for a classifier's attributes and operations is its visibility. The visibility of a feature specifies whether it can be used by other classifiers. In the UML, you can specify any of three levels of visibility. A classifier can see another classifier if it is in scope and if there is an explicit or implicit relationship to the target; relationships are discussed in Chapters 5 and 10; descendants come from generalization relationships, as discussed in Chapter 5; friendship allows a classifier to expose its private parts, as discussed in Chapter 10. 1. public  Any outside classifier with visibility to the given classifier can use the feature; specified by prepending the symbol +  2. protected  Any descendant of the classifier can use the feature; specified by prepending the symbol #  3. private  Only the classifier itself can use the feature; specified by prepending the symbol  