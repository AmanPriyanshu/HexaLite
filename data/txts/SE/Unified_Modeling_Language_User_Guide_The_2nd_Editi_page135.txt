· Exposes only those features necessary for clients to use the relationship and hides all others. · Is unambiguous in its intent and semantics. · Is not so overly specified that it eliminates all degrees of freedom by its implementers. · Is not so underspecified, that it renders the meaning of the relationship ambiguous. When you draw a relationship in the UML, · Show only those properties of the relationship that are important to understanding the abstraction in its context. · Choose a stereotyped version that provides the best visual cue to the intent of the relationship. Chapter 11. Interfaces, Types, and Roles In this chapter · Interfaces, types, roles, and realization · Modeling the seams in a system · Modeling static and dynamic types · Making interfaces understandable and approachable Interfaces define a line between the specification of what an abstraction does and the implementation of how that abstraction does it. An interface is a collection of operations that are used to specify a service of a class or a component. You use interfaces to visualize, specify, construct, and document the seams within your system. Types and roles provide a mechanism for you to model the static and dynamic conformance of an abstraction to an interface in a specific context. A well-structured interface provides a clear separation between the outside view and the inside view of an abstraction, making it possible to understand and approach an abstraction without having to dive into the details of its implementation. Getting Started Designing houses is discussed in Chapter 1. It wouldn't make a lot of sense to design a house that required you to rip up the foundations every time you needed to repaint the walls. Similarly, you wouldn't want to live in a place that required you to rewire the building when-ever you needed to change a light bulb. The owner of a high rise wouldn't be thrilled to have to move doors or replace all electrical and phone jacks whenever a new tenant moved in. Centuries of building experience have provided lots of pragmatic construction-related information to help builders avoid these obvious#and some not so obvious#problems that arise when a building grows and changes over time. In software terms, we call this designing with a clear separation of concerns. For example, in a well-structured building, the skin or facade of the structure can be modified or replaced without disturbing the rest of the building. Similarly, the furnishings inside a building can easily be moved about without changing the infrastructure. 