For this reason, you use component diagrams to visualize, specify, construct, and document the configuration of your executable releases, encompassing the deployment components that form each release and the relationships among those components. You can use component diagrams to forward engineer a new system and to reverse engineer an existing one. When you create component diagrams such as these, you actually just model a part of the things and relationships that make up your system's implementation view. For this reason, each component diagram should focus on one set of components at a time. To model an executable release, The UML's extensibility mechanisms are discussed in Chapter 6; interfaces are discussed in Chapter 11. · Identify the set of components you'd like to model. Typically, this will involve some or all the components that live on one node, or the distribution of these sets of components across all the nodes in the system. · Consider the stereotype of each component in this set. For most systems, you'll find a small number of different kinds of components (such as executables, libraries, tables, files, and documents). You can use the UML's extensibility mechanisms to provide visual cues for these stereotypes. · For each component in this set, consider its relationship to its neighbors. Most often, this will involve interfaces that are exported (realized) by certain components and then imported (used) by others. If you want to expose the seams in your system, model these interfaces explicitly. If you want your model at a higher level of abstraction, elide these relationships by showing only dependencies among the components. For example, Figure 29-3 models part of the executable release for an autonomous robot. This figure focuses on the deployment components associated with the robot's driving and calculation functions. You'll find one component (driver.dll) that exports an interface (IDrive) that is, in turn, imported by another component (path.dll). driver.dll exports one other interface (ISelfTest) that is probably used by other components in the system, although they are not shown here. There's one other component shown in this diagram (collision.dll), and it, too, exports a set of interfaces, although these details are elided: path.dll is shown with a dependency directly to collision.dll. Figure 29-3 Modeling an Executable Release 