realizes the operation, just as actors are visible to the structural aspect of a collaboration that realizes a use case. You can model the relationship among these parts using class diagrams that specify the structural part of a collaboration To model the implementation of an operation, Notes are discussed in Chapter 6. 路 Identify the parameters, return value, and other objects visible to the operation. 路 If the operation is trivial, represent its implementation directly in code, which you can keep in the backplane of your model, or explicitly visualize it in a note. 路 If the operation is algorithmically intensive, model its realization using an activity diagram. 路 If the operation is complex or otherwise requires some detailed design work, represent its implementation as a collaboration. You can further expand the structural and behavioral parts of this collaboration using class and interaction diagrams, respectively. Active classes are discussed in Chapter 22. For example, Figure 27-6 shows the active class RenderFrame with three of its operations exposed. The function progress is simple enough to be implemented directly in code, as specified in the attached note. However, the operation render is much more complicated, so its implementation is realized by the collaboration Ray trace. Although not shown here, you could zoom inside the collaboration to see its structural and behavioral aspects. Figure 27-6 Modeling the Realization of an Operation  Modeling a Mechanism Patterns and frameworks are discussed in Chapter 28; an example of modeling a mechanism is discussed in the same chapter. In all well-structured object-oriented systems, you'll find a spectrum of patterns. At one end, you'll find idioms that represent patterns of use of the implementation language. At the other end, you'll find architectural patterns and frameworks that shape the system as a whole and impose a particular style. In the middle, you'll find mechanisms that represent common design patterns by which the things in the system interact with one another in common ways. You can represent a mechanism in the UML as a collaboration. 