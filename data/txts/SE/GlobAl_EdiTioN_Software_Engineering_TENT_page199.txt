˜˜˚˛˜˜˜˜˜˜ˆ˛ˇ˜˜˜records local weather information and periodically transfers this to a weather infor
-mation system, using a satellite link.ˇˇThe first stage in any software design process is to develop an understanding of the 

relationships between the software that is being designed and its external environment. 

This is essential for deciding how to provide the required system functionality and how 

to structure the system to communicate with its environment. As I discussed in Chapter 5, 

understanding the context also lets you establish the boundaries of the system.Setting the system boundaries helps you decide what features are implemented in 
the system being designed and what features are in other associated systems. In this 

case, you need to decide how functionality is distributed between the control system 

for all of the weather stations and the embedded software in the weather station itself.
System context models and interaction models present complementary views of the relationships between a system and its environment:1.
 A system context model is a structural model that demonstrates the other sys-tems in the environment of the system being developed.2.
 An interaction model is a dynamic model that shows how the system interacts 
with its environment as it is used.The context model of a system may be represented using associations. 
Associations simply show that there are some relationships between the entities 

involved in the association. You can document the environment of the system using 
a simple block diagram, showing the entities in the system and their associations. 

Figure 7.
1 shows that the systems in the environment of each weather station are a 
weather information system, an onboard satellite system, and a control system. The 
cardinality information on the link shows that there is a single control system but 

several weather stations, one satellite, and one general weather information system.When you model the interactions of a system with its environment, you should use an abstract approach that does not include too much detail. One way to do this is 

to use a use case model. As I discussed in Chapters 4 and 5, each  use case represents Weather
informationsystem1..n1Weather
stationSatellite111..n1Controlsystem1111..nFigure 7.1 System context for the 
weather station 