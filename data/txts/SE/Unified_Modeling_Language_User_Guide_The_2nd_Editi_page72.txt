Getting Started Sometimes, you just have to color outside the lines. For example, at a job site, an architect might scribble a few notes on the building's blueprints in order to communicate a subtle detail to the construction workers. In a recording studio, a composer might invent a new musical notation to represent some unusual effect she wants from a keyboard player. In both cases, there already exist well-defined languages#the language of structural blueprints and the language of musical notation#but, sometimes, you have to bend or extend those languages in controlled ways to communicate your intent. Modeling is all about communication. The UML already gives you all the tools you need to visualize, specify, construct, and document the artifacts of a wide range of software-intensive systems. However, you might find circumstances in which you'll want to bend or extend the UML. This happens to human languages all the time (that's why new dictionaries get published every year), because no static language can ever be sufficient to cover everything you'll want to communicate for all time. When using a modeling language such as the UML, remember that you are doing so to communicate, and that means you'll want to stick to the core language unless there's compelling reason to deviate. When you find yourself needing to color outside the lines, you should do so only in controlled ways. Otherwise, you will make it impossible for anyone to understand what you've done. Notes are the mechanism provided by the UML to let you capture arbitrary comments and constraints to help illuminate the models you've created. Notes may represent artifacts that play an important role in the software development life cycle, such as requirements, or they may simply represent free-form observations, reviews, or explanations. The UML provides a graphical representation for comments and constraints, called a note, as Figure 6-1 shows. This notation permits you to visualize a comment directly. In conjunction with the proper tools, notes also give you a placeholder to link to or embed other documents. Figure 6-1 Notes  Stereotypes, tagged values, and constraints are the mechanisms provided by the UML to let you add new building blocks, create new properties, and specify new semantics. For example, if you are modeling a network, you might want to have symbols for routers and hubs; you can use stereotyped nodes to make these things appear as primitive building blocks. Similarly, if you are part of your project's release team, responsible for assembling, testing, and then deploying releases, you might want to keep track of the version number and test results for each major subsystem. You can use tagged values to add this information to your models. Finally, if you are modeling hard real time systems, you might want to adorn your models with information about time budgets and deadlines; you can use constraints to capture these timing requirements. The UML provides a textual representation for stereotypes, tagged values, and constraints, as Figure 6-2 shows. Stereotypes also let you introduce new graphical symbols so that you can provide visual cues to your models that speak the language of your domain and your development culture. 