 Collaboration diagrams have two features that distinguish them from sequence diagrams. First, there is the path. To indicate how one object is linked to another, you can attach a path stereotype to the far end of a link (such as  local!, indicating that the designated object is local to the sender). Typically, you will only need to render the path of the link explicitly for local, parameter, global, and self (but not association) paths. You can use an advanced form of sequence numbers to distinguish concurrent flows of control, as discussed in Chapter 22; path stereotypes are discussed in Chapter 17; complex branching and iteration can be more easily specified in activity diagrams, as discussed in Chapter 19. Second, there is the sequence number. To indicate the time order of a message, you prefix the message with a number (starting with the message numbered 1), increasing monotonically for each new message in the flow of control (2, 3, and so on). To show nesting, you use Dewey decimal numbering (1 is the first message; 1.1 is the first message nested in message 1; 1.2 is the second message nested in message 1; and so on). You can show nesting to an arbitrary depth. Note also that, along the same link, you can show many messages (possibly being sent from different directions), and each will have a unique sequence number. Most of the time, you'll model straight, sequential flows of control. However, you can also model more-complex flows, involving iteration and branching. An iteration represents a repeated sequence of messages. To model an iteration, you prefix the sequence number of a message with an iteration expression such as *[i := 1..n] (or just * if you want to indicate iteration but don't want to specify its details). An iteration indicates that the message (and any nested messages) will be repeated in accordance with the given expression. Similarly, a condition represents a message whose execution is contingent on the evaluation of a Boolean condition. To model a condition, you prefix the sequence number of a message with a condition clause, such as [x > 0]. The alternate paths of a branch will have the same sequence number, but each path must be uniquely distinguishable by a nonoverlapping condition. For both iteration and branching, the UML does not prescribe the format of the expression inside the brackets; you can use pseudocode or the syntax of a specific programming language. Note 