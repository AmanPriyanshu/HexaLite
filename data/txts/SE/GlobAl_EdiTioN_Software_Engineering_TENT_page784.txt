˜˚˘˜˜˚˛˝˙ˆˇ˘
˜environments. See also IDEsarchitectural patterns and, 176business requirements changes, 131
context model for, 142Œ43
marketing, 229
software interaction and system failure, 293Œ94
work, 663equipment layer, 292
equity trading system, 394Œ95
equivalence partitioning, 235Œ236
ERP (Enterprise Resource Planning) systems, 21, 184, 438, 442, 454Œ457application frameworks, 446
architecture of, 455Œ456
configurable application reuse, 454Œ457
customer adaptation of, 438
system procurement and adaptation, 569error-prone constructs, 308, 328Œ29
error tolerance, 289
errorsalgorithmic, 351Œ52
arithmetic, 351
avoidance and discovery, 300Œ01
checking, 359Œ61
correction, 48
failure and fault v., 308
human, 307, 351Œ52, 418Œ21
safety engineering and, 359Œ61
specification, 324Œ25
static analysis for, 359Œ61
system, 307Œ09
timing, 238Œ39estimation techniques (project planning), 682Œ86, 696algorithmic cost modeling, 683, 684Œ86
COCOMO II model, 686Œ96
experience-based techniques, 683Œ84
software productivity and, 686ethical/professional responsibility, 28Œ31, 40
ethnography technique, 116Œ18
evaluation, prototype phase of, 63
event-driven modeling, 156Œ58
evolution (software evolution), 69, 255Œ82activity model (diagram), 61
agile technique and, 261
business costs and, 274Œ76, 279
development v., 60, 256Œ57, 280
engineer activities for, 20, 23, 44
legacy systems, 261Œ70, 280life cycle, 257Œ58, 266
maintenance, 22, 60Œ61, 270Œ79, 280
processes, 258Œ61
program evolution dynamics, 271
refactoring and, 61, 78, 273,  278Œ79, 280requirements changes, 131
servicing v., 257Œ58
software lifetime and, 256Œ57
software reengineering, 273, 276Œ78
spiral model of, 256Œ57
system evolution v., 575Œ76exceptionsCBSE for reuse, 476Œ77
handlers for, 327Œ28Executable UML (xUML), 162
execution time (real-time systems), 627
experience-based estimation, 683Œ84
experience-based testing, 403
explicitly defined process, 297
exposure, 377, 378, 379
external components, 330Œ31
external requirements, 109
extreme programming (XP), 73, 77Œ84acceptance testing and, 77, 82
agile methods and, 73, 77Œ79
continuous integration and, 78, 96
pair programming, 78, 83Œ84
release cycle in, 77
story cards, 79Œ80
test first development, 78, 81Œ83, 242
user requirements, 73, 99ˆfaçade pattern, 211
failure propagation, 560Œ61
failures, see also system failuredefinition v. judgment, 310
error and fault v., 308
hardware, 287
human errors and, 307, 351Œ52, 418Œ21
information loss, 286
operational, 287
safe state solutions to, 351Œ52
server safety v. privacy, 36