Reverse engineering tools have no capacity for abstraction and therefore cannot automatically produce meaningful statechart diagrams. More interesting than the reverse engineering of a model from code is the animation of a model against the execution of a deployed system. For example, given the previous diagram, a tool could animate the states in the diagram as they were reached in the running system. Similarly, the firing of transitions could be animated, showing the receipt of events and the resulting dispatch of actions. Under the control of a debugger, you could control the speed of execution, setting breakpoints to stop the action at interesting states to examine the attribute values of individual objects. Hints and Tips When you create statechart diagrams in the UML, remember that every statechart diagram is just a projection on the same model of a system's dynamic aspects. A single statechart diagram can capture the semantics of a single reactive object, but no one statechart diagram can capture the semantics of an entire nontrivial system. A well-structured statechart diagram · Is focused on communicating one aspect of a system's dynamics. · Contains only those elements that are essential to understanding that aspect. · Provides detail consistent with its level of abstraction (expose only those features that are essential to understanding). · Uses a balance between the styles of Mealy and Moore machines. When you draw a statechart diagram, · Give it a name that communicates its purpose. · Start with modeling the stable states of the object, then follow with modeling the legal transitions from state to state. Address branching, concurrency, and object flow as secondary considerations, possibly in separate diagrams. · Lay out its elements to minimize lines that cross. Part VI: Architectural Modeling 