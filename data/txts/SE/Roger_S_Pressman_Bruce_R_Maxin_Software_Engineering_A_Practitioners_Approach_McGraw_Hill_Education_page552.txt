522 PART THREE  
QUALITY MANAGEMENTand Continuous Quality Improvement,
 
 3rd ed., Auerbach, 2008), Ammann and Offutt ( 
Intro-
duction to Software Testing,
 
 Cambridge University Press, 2008), Everett and McCleod (Soft-ware Testing 
, 
 Wiley-IEEE Computer Society Press, 2007), Black ( 
Pragmatic Software Testing,
 
 Wiley, 2007), Spiller and his colleagues ( 
Software Testing Process: Test Management,
 
 Rocky 
Nook, 2007), Perry ( Effective Methods for Software Testing,
 
 3rd ed., Wiley, 2006), Loveland 
and his colleagues ( Software Testing Techniques,
 
 Charles River Media, 2004), Dustin ( 
Effec-tive Software Testing,
 
 Addison-Wesley, 2002), Craig and Kaskiel ( 
Systematic Software Test-
ing, 
 Artech House, 2002), Tamres ( 
Introducing Software Testing,
 
 Addison-Wesley, 2002), and 
Whittaker ( Exploratory Software Testing: Tips, Tricks, and Techniques to Guide Test Design,
 
 Addison-Wesley, 2009) and ( 
How to Break Software,
 
 Addison-Wesley, 2002) are only a small 
sampling of many books that discuss testing principles, concepts, strategies, and methods.   
 
A third edition of Myers’s [Mye79] classic text has been produced by Myers and his col-
leagues ( The Art of Software Testing,
 
 3rd ed., Wiley, 2011) and covers test-case design tech-
niques in considerable detail. Black ( Managing the Testing Process
 
, 3rd ed., Wiley, 2009), 
Jorgensen ( Software Testing: A Craftsman's Approach,
 
 3rd ed., 
 
 CRC Press, 2008), Pezze 
and Young ( 
Software Testing and Analysis,
 
 Wiley, 2007), Perry ( 
Effective Methods for Soft-ware Testing,
 
 3rd ed., Wiley, 2006), Copeland ( 
A Practitioner's Guide to Software Test Design,
 
 Artech, 2003), and Hutcheson ( Software Testing Fundamentals,
 
 Wiley, 2003) each provide 
useful presentations of test-case design methods and techniques. Beizer’s [Bei90] classic 

text provides comprehensive coverage of white-box techniques, introducing a level of math-
ematical rigor that has often been missing in other treatments of testing. His later book 
[Bei95] presents a concise treatment of important methods.   
 
Software testing is a resource-intensive activity. It is for this reason that many organi-
zations automate parts of the testing process. Books by Graham and her colleagues ( Ex-periences of Test Automation: Case Studies of Software Test Automation,
 
 Addison-Wesley, 
2012) and ( Software Test Automation
 
, Addison-Wesley, 1999), Li and Wu ( 
Effective Software 
Test Automation,
 
 Sybex, 2004); Mosely and Posey ( 
Just Enough Software Test Automation,
 
 Prentice Hall, 2002); Dustin, Rashka, and Poston ( Automated Software Testing: Introduc-
tion, Management, and Performance, 
 Addison-Wesley, 1999); and Poston ( 
Automating Speciﬁ cation-Based Software Testing,
 
 IEEE Computer Society, 1996) discuss tools, strate-
gies, and methods for automated testing. Nquyen and his colleagues ( Happy About 
  Global Software Test Automation,
 
 Happy About Press, 2006) present an executive overview of 
testing automation.   
 
Meszaros ( Unit Test Patterns: Refactoring Test Code,
 
 Addison-Wesley, 2007), Thomas and 
his colleagues ( Java Testing Patterns,
 
 Wiley, 2004) and Binder [Bin99] describe testing pat-
terns that cover testing of methods, classes/clusters, subsystems, reusable components, 
frameworks, and systems as well as test automation and specialized database testing.   
 
A wide variety of information sources on test-case design methods are available on the Internet. An up-to-date list of World Wide Web references that are relevant to testing tech-

niques can be found at the SEPA website:  
 
www.mhhe.com/pressman
 
 
.   
 
 
 pre22126_ch23_496-522.indd   522pre22126_ch23_496-522.indd   52213/12/13   6:14 PM13/12/13   6:14 PM