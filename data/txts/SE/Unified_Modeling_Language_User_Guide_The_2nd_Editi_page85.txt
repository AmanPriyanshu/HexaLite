building blocks, such as classes, interfaces, collaborations, components, nodes, dependencies, generalizations, and associations. Diagrams are the means by which you view these building blocks. A diagram is a graphical presentation of a set of elements, most often rendered as a connected graph of vertices (things) and arcs (relationships). You use diagrams to visualize your system from different perspectives. Because no complex system can be understood in its entirety from only one perspective, the UML defines a number of diagrams so that you can focus on different aspects of your system independently. Good diagrams make the system you are developing understandable and approachable. Choosing the right set of diagrams to model your system forces you to ask the right questions about your system and helps to illuminate the implications of your decisions. Getting Started When you work with an architect to design a house, you start with three things: a list of wants (such as "I want a house with three bedrooms" and "I want to pay no more than x"), a few simple sketches or pictures from other houses representing some of its key features (such as a picture of an entry with a circular staircase), and some general idea of style (such as "We'd like a French country look with hints of California coastal"). The job of the architect is to take these incomplete, ever-changing, and possibly contradictory requirements and turn them into a design. To do that, the architect will probably start with a blueprint of a basic floor plan. This artifact provides a vehicle for you and your architect to visualize the final house, to specify details, and to document decisions. At each review, you'll want to make some changes, such as moving walls about, rearranging rooms, placing windows and doors. Early on, these blueprints change often. As the design matures and you become satisfied that you have a design that best fits all the constraints of form, function, time, and money, these blueprints will stabilize to the point at which they can be used for constructing your house. Even while your house is being built, you'll probably change some of these diagrams and create some new ones, as well. Along the way, you'll want to see views of the house other than just the floor plan. For example, you'll want to see an elevation plan, showing the house from different sides. As you start specifying details so that the job can be meaningfully costed out, your architect will need to create electrical plans, plans for heating and ventilation, and plans for water and sewer connections. If your design requires some unusual feature (such as a long, unsupported span over the basement) or you have a feature that's important to you (such as the placement of a fireplace so that you can put a home theater near it), you and your architect will want to create some sketches that highlight those details. The practice of creating diagrams to visualize systems from different perspectives is not limited to the construction industry. You'll find this in every engineering discipline involving the creation of complex systems, from civil engineering to aeronautical engineering, ship building, manufacturing, and software. The five views of anarchitecture are discussed in Chapter 2. In the context of software, there are five complementary views that are most important in visualizing, specifying, constructing, and documenting a software architecture: the use case view, the design view, the process view, the implementation view, and the deployment view. Each of these views involves structural modeling (modeling static things), as well as behavioral modeling (modeling dynamic things). Together, these different views capture the most important decisions about the system. Individually, each of these views lets you focus attention on one perspective of the system so that you can reason about your decisions with clarity. Modeling the architecture of a system is discussed in Chapter 31. 