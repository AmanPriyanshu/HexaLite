· Render these objects in the UML as instances. Where possible, give each object a name. If there is no meaningful name for the object, render it as an anonymous object. · Expose the properties of each instance necessary and sufficient to model your problem. · Render these instances and their relationships in an interaction diagram or an activity diagram. Interaction diagrams are discussed in Chapter 15; activity diagrams are discussed in Chapter 19. Figure 13-7 shows an interaction diagram illustrating a partial scenario for initiating a phone call in the context of a switch. There are four prototypical objects: a (a CallingAgent), c (a Connection), and t1 and t2 (both instances of Terminal). All four of these objects are prototypical; all represent conceptual proxies for concrete objects that may exist in the real world. Figure 13-7 Modeling Prototypical Instances  Note This example is a collaboration, which represents a society of roles and other elements that work together to provide some cooperative behavior that's bigger than the sum of all the elements. Collaborations have two aspects#one structural (representing the classifier roles and their relationships) and one dynamic (representing the interactions among those prototypical instances). Hints and Tips When you model instances in the UML, remember that every instance should denote a concrete manifestation of some abstraction, typically a class, component, node, use case, or association. A well-structured instance · Is explicitly associated with a specific abstraction. · Has a unique name drawn from the vocabulary of the problem domain or the solution domain. When you draw an instance in the UML, · Render the name of the abstraction of which it is an instance unless it's obvious by context. 