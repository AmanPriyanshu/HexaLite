· Exposes only those time and space properties that are necessary and sufficient to capture the desired behavior of the system. · Centralizes the use of those properties so that they are easy to find and easy to modify. When you draw a time or space property in the UML, · Give your timing marks (the names of messages) meaningful names. · Clearly distinguish between relative and absolute time expressions. · Show space properties primarily by tagged value. Use the nested form only when it's important to visualize the placement of elements across a deployed system. Chapter 24. Statechart Diagrams In this chapter · Modeling reactive objects · Forward and reverse engineering Sequence diagrams, collaboration diagrams,activity diagrams, anduse case diagrams also model the dynamic aspects of systems; sequence diagrams and collaboration diagrams are discussed in Chapter 18; activity diagrams are discussed in Chapter 19; use case diagrams are discussed in Chapter 17. Statechart diagrams are one of the five diagrams in the UML for modeling the dynamic aspects of systems. A statechart diagram shows a state machine. An activity diagram is a special case of a statechart diagram in which all or most of the states are activity states and all or most of the transitions are triggered by completion of activities in the source state. Thus, both activity and statechart diagrams are useful in modeling the lifetime of an object. However, whereas an activity diagram shows flow of control from activity to activity, a statechart diagram shows flow of control from state to state. You use statechart diagrams to model the dynamic aspects of a system. For the most part, this involves modeling the behavior of reactive objects. A reactive object is one whose behavior is best characterized by its response to events dispatched from outside its context. A reactive object has a clear lifetime whose current behavior is affected by its past. Statechart diagrams may be attached to classes, use cases, or entire systems in order to visualize, specify, construct, and document the dynamics of an individual object. Statechart diagrams are not only important for modeling the dynamic aspects of a system, but also for constructing executable systems through forward and reverse engineering. Getting Started The differences between building a dog house and building a high rise are discussed in Chapter 1. Consider the investor who finances the building of a new high rise. She is unlikely to be interested in the details of the building process. The selection of materials, the scheduling of the trades, and the many meetings about engineering details are activities are important to the builder, but far less so to the person bankrolling the project. 