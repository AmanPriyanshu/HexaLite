Classes are discussed in Chapters 4 and 9. Modeling this application in the UML is straightforward. As Figure 3-1 shows, you can represent the class HelloWorld graphically as a rectangular icon. Its paint operation is shown here, as well, with all its formal parameters elided and its implementation specified in the attached note. Figure 3-1 Key Abstractions for HelloWorld  Note The UML is not a visual programming language, although, as the figure shows, the UML does allow# but does not require#a tight coupling to a variety of programming languages, such as Java. The UML is designed to allow models to be transformed into code and to allow code to be reengineered back into models. Some things are best written in the syntax of a textual programming language (for example, mathematical expressions); whereas, other things are best visualized graphically in the UML (for example, hierarchies of classes).  This class diagram captures the basics of the "Hello, World!" application, but it leaves out a number of things. As the preceding code specifies, two other classes#Applet and Graphics#are involved in this application and each is used in a different way. The class Applet is used as the parent of HelloWorld, and the class Graphics is used in the signature and implementation of one of its operations, paint. You can represent these classes and their different relationships to the class HelloWorld in a class diagram, as shown in Figure 3-2. Figure 3-2 Immediate Neighbors Surrounding HelloWorld 