its changing parts. Just as the dynamic aspects of a house encompass airflow and traffic through the rooms of a house, so too do the dynamic aspects of a software system encompass such things as the flow of messages over time and the physical movement of components across a network. The UML's behavioral diagrams are roughly organized around the major ways you can model the dynamics of a system. 1. Use case diagram  Organizes the behaviors of the system  2. Sequence diagram  Focused on the time ordering of messages  3. Collaboration diagram  Focused on the structural organization of objects that send and receive messages  4. Statechart diagram  Focused on the changing state of a system driven by events  5. Activity diagram  Focused on the flow of control from activity to activity Use case diagrams are discussed in Chapter 17. Use Case Diagram   A use case diagram shows a set of use cases and actors (a special kind of class) and their relationships. You apply use case diagrams to illustrate the static use case view of a system. Use case diagrams are especially important in organizing and modeling the behaviors of a system. The next two diagrams and the last two diagrams are semantically equivalent, which means that you can model the dynamics of a system using one kind of behavioral diagram and then transform it to another kind of diagram without loss of information. This lets you reason about different aspects of your system's dynamics. For example, you might want first to create a sequence diagram that illustrates the time ordering of messages and then turn that into a collaboration diagram so that you can develop the structural relationships among the classes whose objects participate in this collaboration (you can go from collaboration diagrams to sequence diagrams, as well). Similarly, you might want to start with a statechart diagram to illustrate the event-driven response of the system and then turn it into an activity diagram that focuses on the flow of control (you can also go from activity diagrams to statechart diagrams). The reason that the UML provides these semantically equivalent diagrams is that modeling the dynamics of a system is just plain hard, and often you must attack a wicked problem from more than one angle at the same time. Interaction diagram is the collective name given to sequence diagrams and collaboration diagrams. All sequence diagrams and collaborations are interaction diagrams, and an interaction diagram is either a sequence diagram or a collaboration diagram. Sequence diagrams are discussed in Chapter 18. Sequence Diagram   A sequence diagram is an interaction diagram that emphasizes the time ordering of messages. A sequence diagram shows a set of objects and the messages sent and received by those objects. The objects are typically named or anonymous instances of classes, but may also represent instances of other things, such as collaborations, components, and nodes. You use sequence diagrams to illustrate the dynamic view of a system. Collaboration diagrams are discussed in Chapter 18. Collaboration Diagram   A collaboration diagram is an interaction diagram that emphasizes the structural organization of the objects that send and receive messages. A collaboration diagram shows a set of objects, 