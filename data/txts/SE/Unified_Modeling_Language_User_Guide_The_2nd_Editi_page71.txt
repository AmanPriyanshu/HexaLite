· Keep your generalization relationships generally balanced; inheritance latices should not be too deep (more than five levels or so should be questioned) nor too wide (instead, look for the possibility of intermediate abstract classes). · Use associations primarily where there are structural relationships among objects. When you draw a relationship in the UML, · Use either rectilinear or oblique lines consistently. Rectilinear lines give a visual cue that emphasizes the connections among related things all pointing to one common thing. Oblique lines are often more space-efficient in complex diagrams. Using both kinds of lines in the same diagram is useful for drawing attention to different groups of relationships. · Avoid lines that cross. · Show only those relationships that are necessary to understand a particular grouping of things. Superfluous relationships (especially redundant associations) should be elided. Chapter 6. Common Mechanisms In this chapter · Notes · Stereotypes, tagged values, and constraints · Modeling comments · Modeling new building blocks · Modeling new properties · Modeling new semantics · Extending the UML These common mechanisms are discussed in Chapter 2. The UML is made simpler by the presence of four common mechanisms that apply consistently throughout the language: specifications, adornments, common divisions, and extensibility mechanisms. This chapter explains the use of two of these common mechanisms, adornments and extensibility mechanisms. Notes are the most important kind of adornment that stands alone. A note is a graphical symbol for rendering constraints or comments attached to an element or a collection of elements. You use notes to attach information to a model, such as requirements, observations, reviews, and explanations. The UML's extensibility mechanisms permit you to extend the language in controlled ways. These mechanisms include stereotypes, tagged values, and constraints. A stereotype extends the vocabulary of the UML, allowing you to create new kinds of building blocks that are derived from existing ones but that are specific to your problem. A tagged value extends the properties of a UML building block, allowing you to create new information in that element's specification. A constraint extends the semantics of a UML building block, allowing you to add new rules or modify existing ones. You use these mechanisms to tailor the UML to the specific needs of your domain and your development culture. 