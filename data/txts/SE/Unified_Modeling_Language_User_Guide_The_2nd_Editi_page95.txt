patterns of collaboration. If you were to show this model at a higher level of abstraction by eliding some detail, you'd lose the information necessary to make these insights. Packages are discussed in Chapter 12; collaborations are discussed in Chapter 27. To model complex views, · First, convince yourself there's no meaningful way to present this information at a higher level of abstraction, perhaps eliding some parts of the diagram and retaining the detail in other parts. · If you've hidden as much detail as you can and your diagram is still complex, consider grouping some of the elements in packages or in higher level collaborations, then render only those packages or collaborations in your diagram. · If your diagram is still complex, use notes and color as visual cues to draw the reader's attention to the points you want to make. · If your diagram is still complex, print it in its entirety and hang it on a convenient large wall. You lose the interactivity an online version of the diagram brings, but you can step back from the diagram and study it for common patterns. Hints and Tips When you create a diagram, · Remember that the purpose of a diagram in the UML is not to draw pretty pictures but, rather, to visualize, specify, construct, and document. Diagrams are a means to the end of deploying an executable system. · Not all diagrams are meant to be preserved. Consider building up diagrams on the fly by querying the elements in your models, and use these diagrams to reason about your system as it is being built. Many of these kinds of diagrams can be thrown away after they have served their purpose (but the semantics upon which they were created will remain as a part of the model). · Avoid extraneous or redundant diagrams. They clutter your models. · Reveal only enough detail in each diagram to address the issues for which it was intended. Extraneous information can distract the reader from the key point you're trying to make. · On the other hand, don't make your diagrams minimalist unless you really need to present something at a very high level of abstraction. Oversimplification can hide details that are important to reasoning about your models. · Keep a balance between the structural and behavioral diagrams in your system. Very few systems are totally static or totally dynamic. · Don't make your diagrams too big (ones that run more than several printed pages are hard to navigate) or too small (consider joining several trivial diagrams into one). · Give each diagram a meaningful name that clearly expresses its intent. · Keep your diagrams organized. Group them into packages according to view. · Don't obsess over the format of a diagram. Let tools help you. 