A signal represents a named object that is dispatched (thrown) asynchronously by one object and then received (caught) by another. Exceptions are supported by most contemporary programming languages and are the most common kind of internal signal that you will need to model. Classes are discussed in Chapters 4 and 9; generalization is discussed in Chapters 5 and 10. Signals have a lot in common with plain classes. For example, signals may have instances, although you don't generally need to model them explicitly. Signals may also be involved in generalization relationships, permitting you to model hierarchies of events, some of which are general (for example, the signal NetworkFailure) and some of which are specific (for example, a specialization of NetworkFailure called WarehouseServerFailure). Also as for classes, signals may have attributes and operations. Note The attributes of a signal serve as its parameters. For example, when you send a signal such as Collision, you can also specify a value for its attributes as parameters, such as Collision(5.3).  State machines are discussed in Chapter 21; interactions are discussed in Chapter 15; interfaces are discussed in Chapter 11; dependencies are discussed in Chapter 5; stereotypes are discussed in Chapter 6. A signal may be sent as the action of a state transition in a state machine or the sending of a message in an interaction. The execution of an operation can also send signals. In fact, when you model a class or an interface, an important part of specifying the behavior of that element is specifying the signals that its operations can send. In the UML, you model the relationship between an operation and the events that it can send by using a dependency relationship, stereotyped as send. In the UML, as Figure 20-2 shows, you model signals (and exceptions) as stereotyped classes. You can use a dependency, stereotyped as send, to indicate that an operation sends a particular signal. Figure 20-2 Signals  Call Events State machines are discussed in Chapter 21. Just as a signal event represents the occurrence of a signal, a call event represents the dispatch of an operation. In both cases, the event may trigger a state transition in a state machine. 