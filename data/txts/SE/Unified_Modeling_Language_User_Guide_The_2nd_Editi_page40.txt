路 Classes and components 路 Static models and dynamic models 路 Connections among models 路 Extending the UML Brian Kernighan and Dennis Ritchie, the authors of the C programming language, point out that "the only way to learn a new programming language is by writing programs in it." The same is true of the UML. The only way to learn the UML is by writing models in it. The first program many developers write when approaching a new programming language is a simple one, involving little more than printing the string "Hello, World!" This is a reasonable starting point, because mastering this trivial application provides some instant gratification. It also covers all the infrastructure needed to get something running. This is where we begin with the UML. Modeling "Hello, World!" is about the simplest use of the UML you'll ever find. However, this application is deceptively easy because underneath it all there are some interesting mechanisms that make it work. These mechanisms can easily be modeled with the UML, providing a richer view of this simple application. Key Abstractions In Java, the applet for printing "Hello, World!" in a Web browser is quite simple:                import java.awt.Graphics;          class HelloWorld extends java.applet.Applet {           public void paint (Graphics g) {            g.drawString("Hello, World!", 10, 10);           }          } The first line of code:                import java.awt.Graphics; makes the class Graphics directly available to the code that follows. The java.awt prefix specifies the Java package in which the class Graphics lives. The second line of code:               class HelloWorld extends java.applet.Applet { introduces a new class named HelloWorld and specifies that it is a kind of class just like Applet, which lives in the package java.applet. The next three lines of code:                 public void paint (Graphics g) {            g.drawString("Hello, World!", 10, 10);           } declare an operation named paint, whose implementation invokes another operation, named drawString, responsible for printing the string "Hello, World!" at the given coordinates. In the usual object-oriented fashion, drawString is an operation on a parameter named g, whose type is the class Graphics. 