The second difference suggests a relationship between classes and components. In particular, a component is the physical implementation of a set of other logical elements, such as classes and collaborations. As Figure 25-3 shows, the relationship between a component and the classes it implements can be shown explicitly by using a dependency relationship. Most of the time, you'll never need to visualize these relationships graphically. Rather, you will keep them as a part of the component's specification. Figure 25-3 Components and Classes  Interfaces are discussed in Chapter 11. The third difference points out how interfaces bridge components and classes. As described in more detail in the next section, components and classes may both realize an interface, but a component's services are usually available only through its interfaces. Note Components are also class-like in that you can (but rarely do) specify attributes and operations for them. You will need to do so only if you're modeling a reflective system that can manipulate its own components.  Components and Interfaces Interfaces are discussed in Chapter 11. An interface is a collection of operations that are used to specify a service of a class or a component. The relationship between component and interface is important. All the most common component-based operating system facilities (such as COM+, CORBA, and Enterprise Java Beans) use interfaces as the glue that binds components together. 