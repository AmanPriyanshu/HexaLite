to servers and about the physical distribution of your system's software components across the nodes. You can model the topology of such systems by using deployment diagrams. 3. To model fully distributed systems At the other end of the continuum of distributed systems are those that are widely, if not globally, distributed, typically encompassing multiple levels of servers. Such systems are often hosts to multiple versions of software components, some of which may even migrate from node to node. Crafting such systems requires you to make decisions that enable the continuous change in the system's topology. You can use deployment diagrams to visualize the system's current topology and distribution of components to reason about the impact of changes on that topology. Common Modeling Techniques Modeling an Embedded System Nodes and devices are discussed in Chapter 26. Developing an embedded system is far more than a software problem. You have to manage the physical world in which there are moving parts that break and in which signals are noisy and behavior is nonlinear. When you model such a system, you have to take into account its interface with the real world, and that means reasoning about unusual devices, as well as nodes. The UML's extensibility mechanisms are discussed in Chapter 6. Deployment diagrams are useful in facilitating the communication between your project's hardware engineers and software developers. By using nodes that are stereotyped to look like familiar devices, you can create diagrams that are understandable by both groups. Deployment diagrams are also helpful in reasoning about hardware/software trade-offs. You'll use deployment diagrams to visualize, specify, construct, and document your system engineering decisions. To model an embedded system, 路 Identify the devices and nodes that are unique to your system. 路 Provide visual cues, especially for unusual devices, by using the UML's extensibility mechanisms to define system-specific stereotypes with appropriate icons. At the very least, you'll want to distinguish processors (which contain software components) and devices (which, at that level of abstraction, don't directly contain software). 路 Model the relationships among these processors and devices in a deployment diagram. Similarly, specify the relationship between the components in your system's implementation view and the nodes in your system's deployment view. 路 As necessary, expand on any intelligent devices by modeling their structure with a more detailed deployment diagram. For example, Figure 30-2 shows the hardware for a simple autonomous robot. You'll find one node (Pentium motherboard) stereotyped as a processor. Figure 30-2 Modeling an Embedded System 