the system. Similarly, when you are handed a system to use, knowing how it behaves is essential to using it properly. Notes can be used to state requirements, as discussed in Chapter 6. Requirements can be expressed in various forms, from unstructured text to expressions in a formal language, and everything in between. Most, if not all, of a system's functional requirements can be expressed as use cases, and the UML's use case diagrams are essential for managing these requirements. To model the requirements of a system, · Establish the context of the system by identifying the actors that surround it. · For each actor, consider the behavior that each expects or requires the system to provide. · Name these common behaviors as use cases. · Factor common behavior into new use cases that are used by others; factor variant behavior into new use cases that extend more main line flows. · Model these use cases, actors, and their relationships in a use case diagram. · Adorn these use cases with notes that assert nonfunctional requirements; you may have to attach some of these to the whole system. Modelingdynamics forload balancing andnetwork reconfiguration are discussed in Chapter 23. Figure 17-3 expands on the previous use case diagram. Although it elides the relationships among the actors and the use cases, it adds additional use cases that are somewhat invisible to the average customer, yet are essential behaviors of the system. This diagram is valuable because it offers a common starting place for end users, domain experts, and developers to visualize, specify, construct, and document their decisions about the functional requirements of this system. For example, Detect card fraud is a behavior important to both the Retail institution and the Sponsoring financial institution. Similarly, Report on account status is another behavior required of the system by the various institutions in its context. Figure 17-3 Modeling the Requirements of a System 