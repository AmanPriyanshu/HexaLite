 As a convenience, you can use the keyword else to mark one outgoing transition, representing the path taken if no other guard expression evaluates to true. Branching and iteration are possible in interaction diagrams, as discussed in Chapter 18. You can achieve the effect of iteration by using one action state that sets the value of an iterator, another action state that increments the iterator, and a branch that evaluates if the iteration is finished. Note The UML does not prescribe the language of these expressions. Abstractly, you might just use structured text; more concretely, you might use the syntax and semantics of a specific programming language.  Forking and Joining Each concurrent flow of control lives in the context of an independent active object, which is typically modeled as either a process or a thread, as discussed in Chapter 22; nodes are discussed in Chapter 26. Simple and branching sequential transitions are the most common paths you'll find in activity diagrams. However#especially when you are modeling workflows of business processes#you might encounter flows that are concurrent. In the UML, you use a synchronization bar to specify the forking and joining of these parallel flows of control. A synchronization bar is rendered as a thick horizontal or vertical line. For example, consider the concurrent flows involved in controlling an audio-animatronic device that mimics human speech and gestures. As Figure 19-6 shows, a fork represents the splitting of a single flow of control into two or more concurrent flows of control. A fork may have one incoming transition and two or more outgoing transitions, each of which represents an independent flow of control. Below the fork, the activities associated with each of these paths continues in parallel. Conceptually, the activities of each of these flows are truly concurrent, although, in a running system, these flows may be either truly concurrent (in the case of a system deployed across multiple nodes) or sequential yet interleaved (in the case of a system deployed across one node), thus giving only the illusion of true concurrency. Figure 19-6 Forking and Joining 