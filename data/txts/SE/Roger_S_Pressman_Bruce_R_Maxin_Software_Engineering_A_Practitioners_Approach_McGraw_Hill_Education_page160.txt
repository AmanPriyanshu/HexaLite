130 PART TWO  
MODELINGconcepts and principles for analysis, design, and testing. Among the most widely used of-ferings (in addition to this book!) are:   
 
Abran, A., and J. Moore,  SWEBOK: Guide to the Software Engineering Body of Knowl-
edge, 
 IEEE, 2002.  13 
 
 
   
 
Pﬂ eeger, S.,  
Software Engineering: Theory and Practice,
 
 4th ed., Prentice Hall, 2009.   
 
Schach, S.,  Object-Oriented and Classical Software Engineering,
 
 McGraw-Hill, 8th ed., 
2010.   
 
Sommerville, I.,  Software Engineering,
 
 9th ed., Addison-Wesley, 2010. 
  
 
These books also present detailed discussion of modeling and construction principles.   
 
Modeling principles are considered in many books dedicated to requirements analy-sis and/or software design. Books by Lieberman ( The Art of Software Modeling,
 
 Auerbach, 
2007), Rosenberg and Stephens ( Use Case Driven Object Modeling with UML: Theory and Practice, 
 Apress, 2007), Roques ( 
UML in Practice, 
 Wiley, 2004), Penker and Eriksson  
( Business Modeling with UML: Business Patterns at Work,
 
 Wiley, 2001) discuss modeling principles and 
methods.   
 
Norman’s ( 
The Design of Everyday Things, 
 Basic Books, 2002) is must reading for every 
software engineer who intends to do design work. Winograd and his colleagues ( 
Bringing Design to Software,
 
 Addison-Wesley, 1996) have edited an excellent collection of essays 
that address practical issues for software design. Constantine and Lockwood ( Software for 
Use, 
 Addison-Wesley, 1999) present the concepts associated with “user-centered design.” 
Tognazzini ( 
Tog on Software Design,
 
 Addison-Wesley, 1995) presents a worthwhile philo-
sophical discussion of the nature of design. Stahl and his colleagues ( Model-Driven Software 
Development: Technology, Engineering,
 
 Wiley, 2006) discuss the principles of model-driven 
development. Halladay ( Principle-Based Refactoring, 
 Principle Publishing, 2012) considers 
eight fundamental design principles and identiﬁ es 50 rules for refactoring. 
  
 
Hundreds of books address one or more elements of the construction activity. Kernighan 
and Plauger [Ker78] have written a classic text on programming style, McConnell [McC04] 
presents pragmatic guidelines for practical software construction, Bentley [Ben99] suggests 
a wide variety of programming pearls, Knuth [Knu98] has written a classic three-volume 
series on the art of programming, and Hunt [Hun99] suggests pragmatic programming 
guidelines.   
 
Myers and his colleagues ( The Art of Software Testing,
 
 3rd ed., Wiley, 2011) have devel-
oped a major revision of his classic text and discuss many important testing principles. 
Books by  How Google Tests Software,
 
 Addison-Wesley, 2012), Perry ( 
Effective Methods for Software Testing,
 
 3rd ed., Wiley, 2006), and Whittaker ( 
How to Break Software,
 
 Addison- 
Wesley, 2002), Kaner and his colleagues ( 
Lessons Learned in Software Testing,
 
 Wiley, 2001), 
and Marick ( The Craft of Software Testing,
 
 Prentice-Hall, 1997) each present important test-
ing concepts and principles and much pragmatic guidance.   
 
A wide variety of information sources on software engineering practice are available on the Internet. An up-to-date list of World Wide Web references that are relevant to software 

engineering practice can be found at the SEPA website:  
www.mhhe.com/pressman
 
.  
 
 
  
 
13  Available free of charge at  
http://www.computer.org/portal/web/swebok/v3guide 
 pre22126_ch07_103-130.indd   130pre22126_ch07_103-130.indd   13013/12/13   6:11 PM13/12/13   6:11 PM