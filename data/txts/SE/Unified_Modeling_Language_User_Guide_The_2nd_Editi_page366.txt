incomplete  generalization Specifies that not all children in the generalization have been specified (even if some are elided) and that additional children are permitted new  instance link Specifies that the instance or link is created during execution of the enclosing interaction or  association Specifies that, over a set of associa tions, exactly one is manifest for each associated object overlapping generalization Specifies that objects of the given parent may have more than one of the given children as a type transient  instance link Specifies that the instance or link is created during execution of the enclosing interaction but is destroyed before completion of execution Appendix C. Rational Unified Process A process is a set of partially ordered steps intended to reach a goal. In software engineering, your goal is to efficiently and predictably deliver a software product that meets the needs of your business. The UML is largely process-independent, meaning that you can use it with a number of software engineering processes. The Rational Unified Process is one such life cycle approach that is especially well-suited to the UML. The goal of the Rational Unified Process is to enable the production of highest quality software that meets end-user needs within predictable schedules and budgets. The Rational Unified Process captures some of the best current software development practices in a form that is tailorable for a wide range of projects and organizations. On the management side, the Rational Unified Process provides a disciplined approach on how to assign tasks and responsibilities within a software development organization. This appendix summarizes the elements of the Rational Unified Process. Characteristics of the Process The Rational Unified Process is an iterative process. For simple systems, it would seem perfectly feasible to sequentially define the whole problem, design the entire solution, build the software, and then test the end product. However, given the complexity and sophistication demanded of current systems, this linear approach to system development is unrealistic. An iterative approach advocates an increasing understanding of the problem through successive refinements and an incremental growth of an effective solution over multiple cycles. Built into the iterative approach is the flexibility to accommodate new requirements or tactical changes in business objectives. It also allows the project to identify and resolve risks sooner rather than later. The Rational Unified Process's activities emphasize the creation and maintenance of models rather than paper documents. Models#especially those specified using the UML#provide semantically rich representations of the software system under development. They can be viewed in multiple ways, and the information represented can be instantaneously captured and controlled electronically. The rationale behind the Rational Unified Process's focus on models rather than paper documents is to minimize the overhead associated with generating and maintaining documents and to maximize the relevant information content. Development under the Rational Unified Process is architecture-centric. The process focuses on the early development and baselining of a software architecture. Having a robust architecture in place facilitates parallel development, minimizes rework, and increases the probability of component reuse and eventual system maintainability. This architectural blueprint serves as a solid basis against which to plan and manage software component-based development. 