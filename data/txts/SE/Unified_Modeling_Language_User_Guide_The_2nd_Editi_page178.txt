Messages Object diagrams are discussed in Chapter 14. Suppose you have a set of objects and a set of links that connect those objects. If that's all you have, then you have a completely static model that can be represented by an object diagram. Object diagrams model the state of a society of objects at a given moment in time and are useful when you want to visualize, specify, construct, or document a static object structure. Operations are discussed in Chapters 4 and 9; events are discussed in Chapter 20; instances are discussed in Chapter 13. Suppose you want to model the changing state of a society of objects over a period of time. Think of it as taking a motion picture of a set of objects, each frame representing a successive moment in time. If these objects are not totally idle, you'll see objects passing messages to other objects, sending events, and invoking operations. In addition, at each frame, you can explicitly visualize the current state and role of individual instances. A message is the specification of a communication among objects that conveys information with the expectation that activity will ensue. The receipt of a message instance may be considered an instance of an event. When you pass a message, the action that results is an executable statement that forms an abstraction of a computational procedure. An action may result in a change in state. In the UML, you can model several kinds of actions. Operations are discussed in Chapters 4 and 9; signals are discussed in Chapter 20. $ Call  Invokes an operation on an object; an object may send a message to itself, resulting in the local invocation of an operation $ Return  Returns a value to the caller $ Send  Sends a signal to an object $ Create  Creates an object $ Destroy  Destroys an object; an object may commit suicide by destroying itself Note You can model complex actions in the UML, as well. In addition to the five basic kinds of actions listed above, you can attach an arbitrary string to a message, in which you can write complex expressions. The UML does not specify the syntax or semantics of such strings.  Create and destroy are visualized as stereotypes, which are discussed in Chapter 6; the distinction between synchronous andasynchronousmessagesis most relevant in thecontext ofconcurrency, as discussed in Chapter 22. The UML provides a visual distinction among these kinds of messages, as Figure 15-3 shows. Figure 15-3 Messages 