CHAPTER 4  
PROCESS MODELS 45 
 
 
 
 
 
4.1.3 Evolutionary Process Models 
 
  
Software, like all complex systems, evolves over a period of time. Business and product requirements often change as development proceeds, making a straight 
line path to an end product unrealistic; tight market deadlines make completion 
of a comprehensive software product impossible, but a limited version must be 
introduced to meet competitive or business pressure; a set of core product or 
system requirements is well understood, but the details of product or system 
extensions have yet to be deﬁ ned. In these and similar situations, you need a 
process model that has been explicitly designed to accommodate a product that 
grows and changes.   Evolutionary models are iterative. They are characterized in a manner that enables you to develop increasingly more complete versions of the software. 
In the paragraphs that follow, we present two common evolutionary process 

models.   
 
 
Prototyping  
.   
Often, a customer deﬁ nes a set of general objectives for software, 
but does not identify detailed requirements for functions and features. In other 
cases, the developer may be unsure of the efﬁ ciency of an algorithm, the adapt-
ability of an operating system, or the form that human-machine interaction 
should take. In these, and many other situations, a  prototyping paradigm
 
 may 
offer the best approach.  Although prototyping can be used as a stand-alone process model, it is more commonly used as a technique that can be implemented within the context of 
any one of the process models noted in this chapter. Regardless of the manner in 

which it is applied, the prototyping paradigm assists you and other stakeholders 
to better understand what is to be built when requirements are fuzzy. 
  
The prototyping paradigm ( Figure 4.4 ) begins with communication. You 
meet with other stakeholders to deﬁ ne the overall objectives for the software, 
identify whatever requirements are known, and outline areas where further 

deﬁ nition is mandatory. A prototyping iteration is planned quickly, and mod-
eling (in the form of a “quick design”) occurs. A quick design focuses on a rep-
resentation of those aspects of the software that will be visible to end users 

(e.g., human interface layout or output display formats). The quick design leads 

to the construction of a prototype. The prototype is deployed and evaluated 

by stakeholders, who provide feedback that is used to further reﬁ ne require-
ments. Iteration occurs as the prototype is tuned to satisfy the needs of various 

stakeholders, while at the same time enabling you to better understand what 

needs to be done. 
 
 
 
 
  Ideally, the prototype serves as a mechanism for identifying software require-
ments. If a working prototype is to be built, you can make use of existing pro-
gram fragments or apply tools that enable working programs to be generated 
quickly. 
   Evolutionary process 
models produce an 
increasingly more 
complete version of 
the software with each 
iteration.   uote:  “Plan to throw 
one away. You will 

do that, anyway. 

Your only choice is 

whether to try to 

sell the throwaway 
to customers.”  Frederick P. 
Brooks    When your customer 
has a legitimate need, 
but is clueless about 
the details, develop 
a prototype as a ﬁ rst 

step. pre22126_ch04_040-065.indd   45pre22126_ch04_040-065.indd   4513/12/13   6:10 PM13/12/13   6:10 PM